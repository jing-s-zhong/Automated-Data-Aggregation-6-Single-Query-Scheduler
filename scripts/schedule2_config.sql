USE SCHEMA BI._CONTROL_LOGIC;
-------------------------------------------------------------
-- Insert or update the jobs 
-------------------------------------------------------------
--
-- map_syndication_drid_partner_to_product_line
--
MERGE INTO SINGLE_SNOW_QUERY_JOBS D
USING (
SELECT $1 JOB_LABEL
    ,$2 JOB_QUERY
    ,$3 JOB_TYPE
    ,$4 JOB_NOTE
    ,$5 JOB_ENABLED
    ,$6 JOB_PRIORITY
    ,$7 SCHEDULE_BATCH_ID
    ,PARSE_JSON($8) SCHEDULE_EXPRESSION
FROM VALUES (
  'map_syndication_drid_partner_to_product_line',
  $$
  MERGE INTO COMMON.PARTNER_ID_TO_PRODUCT_LINE D
  USING (
    SELECT PARTNER_ID
        ,6::NUMBER PRODUCT_LINE_ID
        ,CURRENT_TIMESTAMP()::TIMESTAMP_NTZ INSERTED_TS
        ,CURRENT_TIMESTAMP()::TIMESTAMP_NTZ UPDATED_TS
    FROM DATAMART.SELLSIDE_NETWORK.GOOGLE_ADSENSE_DRID_PLATFORM_DAILY g
    JOIN DATAMART.COMMON.PARTNER p
    ON g.DOMAIN_REGISTRANT = p.DRID
    WHERE g.DATA_TS >= '2020-01-01'
    GROUP BY PARTNER_ID
    ) S
  ON D.PARTNER_ID = S.PARTNER_ID
  WHEN NOT MATCHED THEN INSERT (
      PARTNER_ID,
      PRODUCT_LINE_ID,
      INSERTED_TS,
      UPDATED_TS
    )
  VALUES (
      S.PARTNER_ID,
      S.PRODUCT_LINE_ID,
      S.INSERTED_TS,
      S.UPDATED_TS
  )
  $$,
  'Data Mapping', 'BI-1002 : New Partner_Id mapping for syndication from DRID', true, 10, 1, '[24]'
  )
) S
ON D.JOB_LABEL = S.JOB_LABEL
WHEN MATCHED THEN UPDATE SET
    JOB_LABEL = S.JOB_LABEL,
    JOB_QUERY = S.JOB_QUERY,
    JOB_TYPE = S.JOB_TYPE,
    JOB_NOTE = S.JOB_NOTE,
    JOB_ENABLED = S.JOB_ENABLED,
    JOB_PRIORITY = S.JOB_PRIORITY,
    SCHEDULE_BATCH_ID = S.SCHEDULE_BATCH_ID,
    SCHEDULE_EXPRESSION = S.SCHEDULE_EXPRESSION
WHEN NOT MATCHED THEN INSERT (
    JOB_LABEL,
    JOB_QUERY,
    JOB_TYPE,
    JOB_NOTE,
    JOB_ENABLED,
    JOB_PRIORITY,
    SCHEDULE_BATCH_ID,
    SCHEDULE_EXPRESSION
)
VALUES (
    S.JOB_LABEL,
    S.JOB_QUERY,
    S.JOB_TYPE,
    S.JOB_NOTE,
    S.JOB_ENABLED,
    S.JOB_PRIORITY,
    S.SCHEDULE_BATCH_ID,
    S.SCHEDULE_EXPRESSION
);
--
-- map_ginsu_yahoo_source_tag_to_product_line
--
MERGE INTO SINGLE_SNOW_QUERY_JOBS D
USING (
SELECT $1 JOB_LABEL
    ,$2 JOB_QUERY
    ,$3 JOB_TYPE
    ,$4 JOB_NOTE
    ,$5 JOB_ENABLED
    ,$6 JOB_PRIORITY
    ,$7 SCHEDULE_BATCH_ID
    ,PARSE_JSON($8) SCHEDULE_EXPRESSION
FROM VALUES (
  'map_ginsu_yahoo_source_tag_to_product_line',
  $$
  MERGE INTO BI.COMMON.YAHOO_SOURCE_TAG_PRODUCT_LINE_MAPPINGS D
  USING (
    SELECT SOURCE_TAG
        ,19 PRODUCT_LINE_ID
        ,CURRENT_TIMESTAMP()::TIMESTAMP_NTZ INSERTED_TS
        ,CURRENT_TIMESTAMP()::TIMESTAMP_NTZ UPDATED_TS
        ,'(Inserted by automated task)' NOTES
    FROM DATAMART.SELLSIDE_NETWORK.YAHOO_SOURCE_PLATFORM_PERFORMANCE_DAILY
    WHERE SOURCE_TAG LIKE 'yahoo_groy%'
      AND ACCOUNT_ID IN ('qool')
    GROUP BY 1
    ) S
  ON D.SOURCE_TAG = S.SOURCE_TAG
  WHEN NOT MATCHED THEN INSERT (
      SOURCE_TAG
      ,PRODUCT_LINE_ID
      ,INSERTED_TS
      ,UPDATED_TS
      ,NOTES
  )
  VALUES (
      S.SOURCE_TAG
      ,S.PRODUCT_LINE_ID
      ,S.INSERTED_TS
      ,S.UPDATED_TS
      ,S.NOTES
  )
  $$,
  'Data Mapping', 'BI-1047: New Source_Tag mapping for GINSU from Yahoo data', true, 20, 1, '[24]'
  )
) S
ON D.JOB_LABEL = S.JOB_LABEL
WHEN MATCHED THEN UPDATE SET
    JOB_LABEL = S.JOB_LABEL,
    JOB_QUERY = S.JOB_QUERY,
    JOB_TYPE = S.JOB_TYPE,
    JOB_NOTE = S.JOB_NOTE,
    JOB_ENABLED = S.JOB_ENABLED,
    JOB_PRIORITY = S.JOB_PRIORITY,
    SCHEDULE_BATCH_ID = S.SCHEDULE_BATCH_ID,
    SCHEDULE_EXPRESSION = S.SCHEDULE_EXPRESSION
WHEN NOT MATCHED THEN INSERT (
    JOB_LABEL,
    JOB_QUERY,
    JOB_TYPE,
    JOB_NOTE,
    JOB_ENABLED,
    JOB_PRIORITY,
    SCHEDULE_BATCH_ID,
    SCHEDULE_EXPRESSION
)
VALUES (
    S.JOB_LABEL,
    S.JOB_QUERY,
    S.JOB_TYPE,
    S.JOB_NOTE,
    S.JOB_ENABLED,
    S.JOB_PRIORITY,
    S.SCHEDULE_BATCH_ID,
    S.SCHEDULE_EXPRESSION
);
--
-- map_distributed_search_partner_to_product_line
--
MERGE INTO SINGLE_SNOW_QUERY_JOBS D
USING (
SELECT $1 JOB_LABEL
    ,$2 JOB_QUERY
    ,$3 JOB_TYPE
    ,$4 JOB_NOTE
    ,$5 JOB_ENABLED
    ,$6 JOB_PRIORITY
    ,$7 SCHEDULE_BATCH_ID
    ,PARSE_JSON($8) SCHEDULE_EXPRESSION
FROM VALUES (
  'map_distributed_search_partner_to_product_line',
  $$
  MERGE INTO BI.COMMON.PARTNER_ID_TO_PRODUCT_LINE D
  USING (
    SELECT PARTNER_ID
        ,12 PRODUCT_LINE_ID
        ,CURRENT_TIMESTAMP()::TIMESTAMP_NTZ INSERTED_TS
        ,CURRENT_TIMESTAMP()::TIMESTAMP_NTZ UPDATED_TS
    FROM DATAMART.COMMON.PARTNER_SCD_BDM
    WHERE LOWER(OWNERSHIP) = 'distribution'
    AND (SPEND_OWNER IS NULL OR LOWER(SPEND_OWNER) = 'partner')
    AND LOWER(STATUS) != 'inactive'
    ) S
  ON D.PARTNER_ID = S.PARTNER_ID
  WHEN NOT MATCHED THEN INSERT (
      PARTNER_ID
      ,PRODUCT_LINE_ID
      ,INSERTED_TS
      ,UPDATED_TS
  )
  VALUES (
      S.PARTNER_ID
      ,S.PRODUCT_LINE_ID
      ,S.INSERTED_TS
      ,S.UPDATED_TS
  )
  $$,
  'Data Mapping', 'BI-1102: New Partner_id mapping for distributed search', true, 30, 1, '[24]'
  )
) S
ON D.JOB_LABEL = S.JOB_LABEL
WHEN MATCHED THEN UPDATE SET
    JOB_LABEL = S.JOB_LABEL,
    JOB_QUERY = S.JOB_QUERY,
    JOB_TYPE = S.JOB_TYPE,
    JOB_NOTE = S.JOB_NOTE,
    JOB_ENABLED = S.JOB_ENABLED,
    JOB_PRIORITY = S.JOB_PRIORITY,
    SCHEDULE_BATCH_ID = S.SCHEDULE_BATCH_ID,
    SCHEDULE_EXPRESSION = S.SCHEDULE_EXPRESSION
WHEN NOT MATCHED THEN INSERT (
    JOB_LABEL,
    JOB_QUERY,
    JOB_TYPE,
    JOB_NOTE,
    JOB_ENABLED,
    JOB_PRIORITY,
    SCHEDULE_BATCH_ID,
    SCHEDULE_EXPRESSION
)
VALUES (
    S.JOB_LABEL,
    S.JOB_QUERY,
    S.JOB_TYPE,
    S.JOB_NOTE,
    S.JOB_ENABLED,
    S.JOB_PRIORITY,
    S.SCHEDULE_BATCH_ID,
    S.SCHEDULE_EXPRESSION
);
--
-- map_update_account_metadata_mappings
--
MERGE INTO SINGLE_SNOW_QUERY_JOBS D
USING (
SELECT $1 JOB_LABEL
    ,$2 JOB_QUERY
    ,$3 JOB_TYPE
    ,$4 JOB_NOTE
    ,$5 JOB_ENABLED
    ,$6 JOB_PRIORITY
    ,$7 SCHEDULE_BATCH_ID
    ,PARSE_JSON($8) SCHEDULE_EXPRESSION
FROM VALUES (
  'map_update_account_metadata_mappings',
  $$
  CALL COMMON.UPDATE_ACCOUNT_METADATA_MAPPINGS();
  $$,
  'Data Mapping', 'BI-591: Update account metadata mappings, etc.', true, 40, 1, '[24]'
  )
) S
ON D.JOB_LABEL = S.JOB_LABEL
WHEN MATCHED THEN UPDATE SET
    JOB_LABEL = S.JOB_LABEL,
    JOB_QUERY = S.JOB_QUERY,
    JOB_TYPE = S.JOB_TYPE,
    JOB_NOTE = S.JOB_NOTE,
    JOB_ENABLED = S.JOB_ENABLED,
    JOB_PRIORITY = S.JOB_PRIORITY,
    SCHEDULE_BATCH_ID = S.SCHEDULE_BATCH_ID,
    SCHEDULE_EXPRESSION = S.SCHEDULE_EXPRESSION
WHEN NOT MATCHED THEN INSERT (
    JOB_LABEL,
    JOB_QUERY,
    JOB_TYPE,
    JOB_NOTE,
    JOB_ENABLED,
    JOB_PRIORITY,
    SCHEDULE_BATCH_ID,
    SCHEDULE_EXPRESSION
)
VALUES (
    S.JOB_LABEL,
    S.JOB_QUERY,
    S.JOB_TYPE,
    S.JOB_NOTE,
    S.JOB_ENABLED,
    S.JOB_PRIORITY,
    S.SCHEDULE_BATCH_ID,
    S.SCHEDULE_EXPRESSION
);
--
-- get_publishing_quora_google_sheet_spend
--
MERGE INTO SINGLE_SNOW_QUERY_JOBS D
USING (
SELECT $1 JOB_LABEL
    ,$2 JOB_QUERY
    ,$3 JOB_TYPE
    ,$4 JOB_NOTE
    ,$5 JOB_ENABLED
    ,$6 JOB_PRIORITY
    ,$7 SCHEDULE_BATCH_ID
    ,PARSE_JSON($8) SCHEDULE_EXPRESSION
FROM VALUES (
  'get_publishing_quora_google_sheet_spend',
  $$
  MERGE INTO MANUAL_ENTRY.BUYSIDE_ACCOUNT_DATA_MANUAL_ENTRY D
  USING (
    SELECT A.DATA:"date"::DATE DATA_TS
      ,'quora manual entry' ACCOUNT_ID
      ,'Active' ACCOUNT_STATUS
      ,'quora' NETWORK_NAME
      ,B.ID NETWORK_NAME_ID
      ,'USD' CURRENCY_CODE
      ,1 CONVERSION_RATE
      ,NULL::NUMBER CLICKS
      ,NULL::NUMBER IMPRESSIONS
      ,REPLACE(TRIM(A.DATA:"quora_spend_usd",'$'),',')::FLOAT NATIVE_SPEND
      ,REPLACE(TRIM(A.DATA:"quora_spend_usd",'$'),',')::FLOAT SPEND
    FROM BI.MANUAL_ENTRY.BUYSIDE_PUBLISHING_MANUAL_SPEND_DAILY A
    JOIN BI.COMMON.NETWORK_NAMES B
    ON B.NETWORK_NAME = 'Quora'
    WHERE A.DATA:"quora_spend_usd" != ''
      AND A.DATA:"date" != ''
    ) S
  ON D.DATA_TS = S.DATA_TS
    AND D.NETWORK_NAME_ID = S.NETWORK_NAME_ID
    AND D.ACCOUNT_ID = S.ACCOUNT_ID
  WHEN MATCHED AND D.NATIVE_SPEND != S.NATIVE_SPEND
    THEN UPDATE 
      SET ACCOUNT_STATUS = S.ACCOUNT_STATUS
        ,NETWORK_NAME = S.NETWORK_NAME
        ,CURRENCY_CODE = S.CURRENCY_CODE
        ,CONVERSION_RATE = S.CONVERSION_RATE
        ,CLICKS = S.CLICKS
        ,IMPRESSIONS = S.IMPRESSIONS
        ,NATIVE_SPEND = S.NATIVE_SPEND
        ,SPEND = S.SPEND
  WHEN NOT MATCHED 
    THEN INSERT (
      DATA_TS
      ,ACCOUNT_ID
      ,ACCOUNT_STATUS
      ,NETWORK_NAME
      ,NETWORK_NAME_ID
      ,CURRENCY_CODE
      ,CONVERSION_RATE
      ,CLICKS
      ,IMPRESSIONS
      ,NATIVE_SPEND
      ,SPEND
      )
  VALUES (
    S.DATA_TS
    ,S.ACCOUNT_ID
    ,S.ACCOUNT_STATUS
    ,S.NETWORK_NAME
    ,S.NETWORK_NAME_ID
    ,S.CURRENCY_CODE
    ,S.CONVERSION_RATE
    ,S.CLICKS
    ,S.IMPRESSIONS
    ,S.NATIVE_SPEND
    ,S.SPEND
  )
  $$,
  'Manual Spend', 'BI-1151: Publishing quora manual entry spend', true, 110, 1, '[24]'
  )
) S
ON D.JOB_LABEL = S.JOB_LABEL
WHEN MATCHED THEN UPDATE SET
    JOB_LABEL = S.JOB_LABEL,
    JOB_QUERY = S.JOB_QUERY,
    JOB_TYPE = S.JOB_TYPE,
    JOB_NOTE = S.JOB_NOTE,
    JOB_ENABLED = S.JOB_ENABLED,
    JOB_PRIORITY = S.JOB_PRIORITY,
    SCHEDULE_BATCH_ID = S.SCHEDULE_BATCH_ID,
    SCHEDULE_EXPRESSION = S.SCHEDULE_EXPRESSION
WHEN NOT MATCHED THEN INSERT (
    JOB_LABEL,
    JOB_QUERY,
    JOB_TYPE,
    JOB_NOTE,
    JOB_ENABLED,
    JOB_PRIORITY,
    SCHEDULE_BATCH_ID,
    SCHEDULE_EXPRESSION
)
VALUES (
    S.JOB_LABEL,
    S.JOB_QUERY,
    S.JOB_TYPE,
    S.JOB_NOTE,
    S.JOB_ENABLED,
    S.JOB_PRIORITY,
    S.SCHEDULE_BATCH_ID,
    S.SCHEDULE_EXPRESSION
);
--
-- get_publishing_applenews_google_sheet_spend
--
MERGE INTO SINGLE_SNOW_QUERY_JOBS D
USING (
SELECT $1 JOB_LABEL
    ,$2 JOB_QUERY
    ,$3 JOB_TYPE
    ,$4 JOB_NOTE
    ,$5 JOB_ENABLED
    ,$6 JOB_PRIORITY
    ,$7 SCHEDULE_BATCH_ID
    ,PARSE_JSON($8) SCHEDULE_EXPRESSION
FROM VALUES (
  'get_publishing_applenews_google_sheet_spend',
  $$
  MERGE INTO MANUAL_ENTRY.BUYSIDE_ACCOUNT_DATA_MANUAL_ENTRY D
  USING (
    SELECT A.DATA:"date"::DATE DATA_TS
      ,'applenews qool pub manual loading' ACCOUNT_ID
      ,'Active' ACCOUNT_STATUS
      ,'Apple News' NETWORK_NAME
      ,B.ID NETWORK_NAME_ID
      ,'USD' CURRENCY_CODE
      ,1 CONVERSION_RATE
      ,NULL::NUMBER CLICKS
      ,NULL::NUMBER IMPRESSIONS
      ,REPLACE(TRIM(A.DATA:"applenews_spend_usd",'$'),',')::FLOAT NATIVE_SPEND
      ,REPLACE(TRIM(A.DATA:"applenews_spend_usd",'$'),',')::FLOAT SPEND
    FROM BI.MANUAL_ENTRY.BUYSIDE_PUBLISHING_MANUAL_SPEND_DAILY A
    JOIN BI.COMMON.NETWORK_NAMES B
    ON B.NETWORK_NAME = 'Apple News'
    WHERE A.DATA:"applenews_spend_usd" != ''
      AND A.DATA:"date" != ''
    ) S
  ON D.DATA_TS = S.DATA_TS
    AND D.NETWORK_NAME_ID = S.NETWORK_NAME_ID
    AND D.ACCOUNT_ID = S.ACCOUNT_ID
  WHEN MATCHED AND D.NATIVE_SPEND != S.NATIVE_SPEND
    THEN UPDATE 
      SET ACCOUNT_STATUS = S.ACCOUNT_STATUS
        ,NETWORK_NAME = S.NETWORK_NAME
        ,CURRENCY_CODE = S.CURRENCY_CODE
        ,CONVERSION_RATE = S.CONVERSION_RATE
        ,CLICKS = S.CLICKS
        ,IMPRESSIONS = S.IMPRESSIONS
        ,NATIVE_SPEND = S.NATIVE_SPEND
        ,SPEND = S.SPEND
  WHEN NOT MATCHED 
    THEN INSERT (
      DATA_TS
      ,ACCOUNT_ID
      ,ACCOUNT_STATUS
      ,NETWORK_NAME
      ,NETWORK_NAME_ID
      ,CURRENCY_CODE
      ,CONVERSION_RATE
      ,CLICKS
      ,IMPRESSIONS
      ,NATIVE_SPEND
      ,SPEND
      )
  VALUES (
    S.DATA_TS
    ,S.ACCOUNT_ID
    ,S.ACCOUNT_STATUS
    ,S.NETWORK_NAME
    ,S.NETWORK_NAME_ID
    ,S.CURRENCY_CODE
    ,S.CONVERSION_RATE
    ,S.CLICKS
    ,S.IMPRESSIONS
    ,S.NATIVE_SPEND
    ,S.SPEND
  )
  $$,
  'Manual Spend', 'BI-1229: Publishing & Ginsu apple-news manual entry spend', true, 111, 1, '[24]'
  )
) S
ON D.JOB_LABEL = S.JOB_LABEL
WHEN MATCHED THEN UPDATE SET
    JOB_LABEL = S.JOB_LABEL,
    JOB_QUERY = S.JOB_QUERY,
    JOB_TYPE = S.JOB_TYPE,
    JOB_NOTE = S.JOB_NOTE,
    JOB_ENABLED = S.JOB_ENABLED,
    JOB_PRIORITY = S.JOB_PRIORITY,
    SCHEDULE_BATCH_ID = S.SCHEDULE_BATCH_ID,
    SCHEDULE_EXPRESSION = S.SCHEDULE_EXPRESSION
WHEN NOT MATCHED THEN INSERT (
    JOB_LABEL,
    JOB_QUERY,
    JOB_TYPE,
    JOB_NOTE,
    JOB_ENABLED,
    JOB_PRIORITY,
    SCHEDULE_BATCH_ID,
    SCHEDULE_EXPRESSION
)
VALUES (
    S.JOB_LABEL,
    S.JOB_QUERY,
    S.JOB_TYPE,
    S.JOB_NOTE,
    S.JOB_ENABLED,
    S.JOB_PRIORITY,
    S.SCHEDULE_BATCH_ID,
    S.SCHEDULE_EXPRESSION
);
--
-- get_publishing_cnn_google_sheet_spend
--
MERGE INTO SINGLE_SNOW_QUERY_JOBS D
USING (
SELECT $1 JOB_LABEL
    ,$2 JOB_QUERY
    ,$3 JOB_TYPE
    ,$4 JOB_NOTE
    ,$5 JOB_ENABLED
    ,$6 JOB_PRIORITY
    ,$7 SCHEDULE_BATCH_ID
    ,PARSE_JSON($8) SCHEDULE_EXPRESSION
FROM VALUES (
  'get_publishing_cnn_google_sheet_spend',
  $$
  MERGE INTO MANUAL_ENTRY.BUYSIDE_ACCOUNT_DATA_MANUAL_ENTRY D
  USING (
    SELECT A.DATA:"date"::DATE DATA_TS
      ,'publishing_cnn_manual_spend' ACCOUNT_ID
      ,'Active' ACCOUNT_STATUS
      ,'CNN' NETWORK_NAME
      ,B.ID NETWORK_NAME_ID
      ,'USD' CURRENCY_CODE
      ,1 CONVERSION_RATE
      ,NULL::NUMBER CLICKS
      ,NULL::NUMBER IMPRESSIONS
      ,REPLACE(TRIM(A.DATA:"cnn_spend_usd",'$'),',')::FLOAT NATIVE_SPEND
      ,REPLACE(TRIM(A.DATA:"cnn_spend_usd",'$'),',')::FLOAT SPEND
    FROM BI.MANUAL_ENTRY.BUYSIDE_PUBLISHING_MANUAL_SPEND_DAILY A
    JOIN BI.COMMON.NETWORK_NAMES B
    ON B.NETWORK_NAME = 'CNN'
    WHERE A.DATA:"cnn_spend_usd" != ''
      AND A.DATA:"date" != ''
    ) S
  ON D.DATA_TS = S.DATA_TS
    AND D.NETWORK_NAME_ID = S.NETWORK_NAME_ID
    AND D.ACCOUNT_ID = S.ACCOUNT_ID
  WHEN MATCHED AND D.NATIVE_SPEND != S.NATIVE_SPEND
    THEN UPDATE 
      SET ACCOUNT_STATUS = S.ACCOUNT_STATUS
        ,NETWORK_NAME = S.NETWORK_NAME
        ,CURRENCY_CODE = S.CURRENCY_CODE
        ,CONVERSION_RATE = S.CONVERSION_RATE
        ,CLICKS = S.CLICKS
        ,IMPRESSIONS = S.IMPRESSIONS
        ,NATIVE_SPEND = S.NATIVE_SPEND
        ,SPEND = S.SPEND
  WHEN NOT MATCHED 
    THEN INSERT (
      DATA_TS
      ,ACCOUNT_ID
      ,ACCOUNT_STATUS
      ,NETWORK_NAME
      ,NETWORK_NAME_ID
      ,CURRENCY_CODE
      ,CONVERSION_RATE
      ,CLICKS
      ,IMPRESSIONS
      ,NATIVE_SPEND
      ,SPEND
      )
  VALUES (
    S.DATA_TS
    ,S.ACCOUNT_ID
    ,S.ACCOUNT_STATUS
    ,S.NETWORK_NAME
    ,S.NETWORK_NAME_ID
    ,S.CURRENCY_CODE
    ,S.CONVERSION_RATE
    ,S.CLICKS
    ,S.IMPRESSIONS
    ,S.NATIVE_SPEND
    ,S.SPEND
  )
  $$,
  'Manual Spend', 'BI-1290: Publishing CNN manual entry G-sheet spend', true, 112, 1, '[24]'
  )
) S
ON D.JOB_LABEL = S.JOB_LABEL
WHEN MATCHED THEN UPDATE SET
    JOB_LABEL = S.JOB_LABEL,
    JOB_QUERY = S.JOB_QUERY,
    JOB_TYPE = S.JOB_TYPE,
    JOB_NOTE = S.JOB_NOTE,
    JOB_ENABLED = S.JOB_ENABLED,
    JOB_PRIORITY = S.JOB_PRIORITY,
    SCHEDULE_BATCH_ID = S.SCHEDULE_BATCH_ID,
    SCHEDULE_EXPRESSION = S.SCHEDULE_EXPRESSION
WHEN NOT MATCHED THEN INSERT (
    JOB_LABEL,
    JOB_QUERY,
    JOB_TYPE,
    JOB_NOTE,
    JOB_ENABLED,
    JOB_PRIORITY,
    SCHEDULE_BATCH_ID,
    SCHEDULE_EXPRESSION
)
VALUES (
    S.JOB_LABEL,
    S.JOB_QUERY,
    S.JOB_TYPE,
    S.JOB_NOTE,
    S.JOB_ENABLED,
    S.JOB_PRIORITY,
    S.SCHEDULE_BATCH_ID,
    S.SCHEDULE_EXPRESSION
);
--
-- get_waterfox_playanext_google_sheet_spend
--
MERGE INTO SINGLE_SNOW_QUERY_JOBS D
USING (
SELECT $1 JOB_LABEL
    ,$2 JOB_QUERY
    ,$3 JOB_TYPE
    ,$4 JOB_NOTE
    ,$5 JOB_ENABLED
    ,$6 JOB_PRIORITY
    ,$7 SCHEDULE_BATCH_ID
    ,PARSE_JSON($8) SCHEDULE_EXPRESSION
FROM VALUES (
  'get_waterfox_playanext_google_sheet_spend',
  $$
  MERGE INTO MANUAL_ENTRY.BUYSIDE_ACCOUNT_DATA_MANUAL_ENTRY D
  USING (
    SELECT A.DATA:"date"::DATE DATA_TS
      ,'playanext manual waterfox spend' ACCOUNT_ID
      ,'Active' ACCOUNT_STATUS
      ,'PlayaNext' NETWORK_NAME
      ,B.ID NETWORK_NAME_ID
      ,'USD' CURRENCY_CODE
      ,1 CONVERSION_RATE
      ,NULL::NUMBER CLICKS
      ,NULL::NUMBER IMPRESSIONS
      ,REPLACE(TRIM(A.DATA:"playanext_spend",'$'),',') NATIVE_SPEND
      ,REPLACE(TRIM(A.DATA:"playanext_spend",'$'),',') SPEND
    FROM BI.MANUAL_ENTRY.WATERFOX_SPEND_MANUAL_ENTRY A
    JOIN BI.COMMON.NETWORK_NAMES B
    ON B.NETWORK_NAME = 'PlayaNext'
    WHERE A.DATA:playanext_spend != ''
      AND A.DATA:"date" != ''
    ) S
  ON D.DATA_TS = S.DATA_TS
    AND D.NETWORK_NAME_ID = S.NETWORK_NAME_ID
    AND D.ACCOUNT_ID = S.ACCOUNT_ID
  WHEN MATCHED AND D.NATIVE_SPEND != S.NATIVE_SPEND
    THEN UPDATE 
      SET ACCOUNT_STATUS = S.ACCOUNT_STATUS
        ,NETWORK_NAME = S.NETWORK_NAME
        ,CURRENCY_CODE = S.CURRENCY_CODE
        ,CONVERSION_RATE = S.CONVERSION_RATE
        ,CLICKS = S.CLICKS
        ,IMPRESSIONS = S.IMPRESSIONS
        ,NATIVE_SPEND = S.NATIVE_SPEND
        ,SPEND = S.SPEND
  WHEN NOT MATCHED 
    THEN INSERT (
      DATA_TS
      ,ACCOUNT_ID
      ,ACCOUNT_STATUS
      ,NETWORK_NAME
      ,NETWORK_NAME_ID
      ,CURRENCY_CODE
      ,CONVERSION_RATE
      ,CLICKS
      ,IMPRESSIONS
      ,NATIVE_SPEND
      ,SPEND
      )
  VALUES (
    S.DATA_TS
    ,S.ACCOUNT_ID
    ,S.ACCOUNT_STATUS
    ,S.NETWORK_NAME
    ,S.NETWORK_NAME_ID
    ,S.CURRENCY_CODE
    ,S.CONVERSION_RATE
    ,S.CLICKS
    ,S.IMPRESSIONS
    ,S.NATIVE_SPEND
    ,S.SPEND
  )
  $$,
  'Manual Spend', 'BI-1026: Waterfox Playanext manual spend', true, 130, 1, '[24]'
  )
) S
ON D.JOB_LABEL = S.JOB_LABEL
WHEN MATCHED THEN UPDATE SET
    JOB_LABEL = S.JOB_LABEL,
    JOB_QUERY = S.JOB_QUERY,
    JOB_TYPE = S.JOB_TYPE,
    JOB_NOTE = S.JOB_NOTE,
    JOB_ENABLED = S.JOB_ENABLED,
    JOB_PRIORITY = S.JOB_PRIORITY,
    SCHEDULE_BATCH_ID = S.SCHEDULE_BATCH_ID,
    SCHEDULE_EXPRESSION = S.SCHEDULE_EXPRESSION
WHEN NOT MATCHED THEN INSERT (
    JOB_LABEL,
    JOB_QUERY,
    JOB_TYPE,
    JOB_NOTE,
    JOB_ENABLED,
    JOB_PRIORITY,
    SCHEDULE_BATCH_ID,
    SCHEDULE_EXPRESSION
)
VALUES (
    S.JOB_LABEL,
    S.JOB_QUERY,
    S.JOB_TYPE,
    S.JOB_NOTE,
    S.JOB_ENABLED,
    S.JOB_PRIORITY,
    S.SCHEDULE_BATCH_ID,
    S.SCHEDULE_EXPRESSION
);
--
-- get_ginsu_cnn_google_sheet_spend
--
MERGE INTO SINGLE_SNOW_QUERY_JOBS D
USING (
SELECT $1 JOB_LABEL
    ,$2 JOB_QUERY
    ,$3 JOB_TYPE
    ,$4 JOB_NOTE
    ,$5 JOB_ENABLED
    ,$6 JOB_PRIORITY
    ,$7 SCHEDULE_BATCH_ID
    ,PARSE_JSON($8) SCHEDULE_EXPRESSION
FROM VALUES (
  'get_ginsu_cnn_google_sheet_spend',
  $$
  MERGE INTO MANUAL_ENTRY.BUYSIDE_ACCOUNT_DATA_MANUAL_ENTRY D
  USING (
    SELECT A.DATA:"date"::DATE DATA_TS
      ,'cnn ginsu manual spend' ACCOUNT_ID
      ,'Active' ACCOUNT_STATUS
      ,'CNN' NETWORK_NAME
      ,B.ID NETWORK_NAME_ID
      ,'USD' CURRENCY_CODE
      ,1 CONVERSION_RATE
      ,NULL::NUMBER CLICKS
      ,NULL::NUMBER IMPRESSIONS
      ,REPLACE(TRIM(A.DATA:"cnn_spend_usd",'$'),',') NATIVE_SPEND
      ,REPLACE(TRIM(A.DATA:"cnn_spend_usd",'$'),',') SPEND
    FROM BI.MANUAL_ENTRY.GINSU_SPEND_MANUAL_ENTRY A
    JOIN BI.COMMON.NETWORK_NAMES B
    ON B.NETWORK_NAME = 'CNN'
    WHERE A.DATA:"cnn_spend_usd" != ''
      AND A.DATA:"date" != ''
    ) S
  ON D.DATA_TS = S.DATA_TS
    AND D.NETWORK_NAME_ID = S.NETWORK_NAME_ID
    AND D.ACCOUNT_ID = S.ACCOUNT_ID
  WHEN MATCHED AND D.NATIVE_SPEND != S.NATIVE_SPEND
    THEN UPDATE 
      SET ACCOUNT_STATUS = S.ACCOUNT_STATUS
        ,NETWORK_NAME = S.NETWORK_NAME
        ,CURRENCY_CODE = S.CURRENCY_CODE
        ,CONVERSION_RATE = S.CONVERSION_RATE
        ,CLICKS = S.CLICKS
        ,IMPRESSIONS = S.IMPRESSIONS
        ,NATIVE_SPEND = S.NATIVE_SPEND
        ,SPEND = S.SPEND
  WHEN NOT MATCHED 
    THEN INSERT (
      DATA_TS
      ,ACCOUNT_ID
      ,ACCOUNT_STATUS
      ,NETWORK_NAME
      ,NETWORK_NAME_ID
      ,CURRENCY_CODE
      ,CONVERSION_RATE
      ,CLICKS
      ,IMPRESSIONS
      ,NATIVE_SPEND
      ,SPEND
      )
  VALUES (
    S.DATA_TS
    ,S.ACCOUNT_ID
    ,S.ACCOUNT_STATUS
    ,S.NETWORK_NAME
    ,S.NETWORK_NAME_ID
    ,S.CURRENCY_CODE
    ,S.CONVERSION_RATE
    ,S.CLICKS
    ,S.IMPRESSIONS
    ,S.NATIVE_SPEND
    ,S.SPEND
  )
  $$,
  'Manual Spend', 'BI-1046: Ginbsu cnn manual entry spend', true, 140, 1, '[24]'
  )
) S
ON D.JOB_LABEL = S.JOB_LABEL
WHEN MATCHED THEN UPDATE SET
    JOB_LABEL = S.JOB_LABEL,
    JOB_QUERY = S.JOB_QUERY,
    JOB_TYPE = S.JOB_TYPE,
    JOB_NOTE = S.JOB_NOTE,
    JOB_ENABLED = S.JOB_ENABLED,
    JOB_PRIORITY = S.JOB_PRIORITY,
    SCHEDULE_BATCH_ID = S.SCHEDULE_BATCH_ID,
    SCHEDULE_EXPRESSION = S.SCHEDULE_EXPRESSION
WHEN NOT MATCHED THEN INSERT (
    JOB_LABEL,
    JOB_QUERY,
    JOB_TYPE,
    JOB_NOTE,
    JOB_ENABLED,
    JOB_PRIORITY,
    SCHEDULE_BATCH_ID,
    SCHEDULE_EXPRESSION
)
VALUES (
    S.JOB_LABEL,
    S.JOB_QUERY,
    S.JOB_TYPE,
    S.JOB_NOTE,
    S.JOB_ENABLED,
    S.JOB_PRIORITY,
    S.SCHEDULE_BATCH_ID,
    S.SCHEDULE_EXPRESSION
);
--
-- get_ginsu_applenews_google_sheet_spend
--
MERGE INTO SINGLE_SNOW_QUERY_JOBS D
USING (
SELECT $1 JOB_LABEL
    ,$2 JOB_QUERY
    ,$3 JOB_TYPE
    ,$4 JOB_NOTE
    ,$5 JOB_ENABLED
    ,$6 JOB_PRIORITY
    ,$7 SCHEDULE_BATCH_ID
    ,PARSE_JSON($8) SCHEDULE_EXPRESSION
FROM VALUES (
  'get_ginsu_applenews_google_sheet_spend',
  $$
  MERGE INTO MANUAL_ENTRY.BUYSIDE_ACCOUNT_DATA_MANUAL_ENTRY D
  USING (
    SELECT A.DATA:"date"::DATE DATA_TS
      ,'applenews ginsu manual loading' ACCOUNT_ID
      ,'Active' ACCOUNT_STATUS
      ,'Apple News' NETWORK_NAME
      ,B.ID NETWORK_NAME_ID
      ,'USD' CURRENCY_CODE
      ,1 CONVERSION_RATE
      ,NULL::NUMBER CLICKS
      ,NULL::NUMBER IMPRESSIONS
      ,REPLACE(TRIM(A.DATA:"applenews_spend_usd",'$'),',')::FLOAT NATIVE_SPEND
      ,REPLACE(TRIM(A.DATA:"applenews_spend_usd",'$'),',')::FLOAT SPEND
    FROM BI.MANUAL_ENTRY.GINSU_SPEND_MANUAL_ENTRY A
    JOIN BI.COMMON.NETWORK_NAMES B
    ON B.NETWORK_NAME = 'Apple News'
    WHERE A.DATA:"applenews_spend_usd" != ''
      AND A.DATA:"date" != ''
    ) S
  ON D.DATA_TS = S.DATA_TS
    AND D.NETWORK_NAME_ID = S.NETWORK_NAME_ID
    AND D.ACCOUNT_ID = S.ACCOUNT_ID
  WHEN MATCHED AND D.NATIVE_SPEND != S.NATIVE_SPEND
    THEN UPDATE 
      SET ACCOUNT_STATUS = S.ACCOUNT_STATUS
        ,NETWORK_NAME = S.NETWORK_NAME
        ,CURRENCY_CODE = S.CURRENCY_CODE
        ,CONVERSION_RATE = S.CONVERSION_RATE
        ,CLICKS = S.CLICKS
        ,IMPRESSIONS = S.IMPRESSIONS
        ,NATIVE_SPEND = S.NATIVE_SPEND
        ,SPEND = S.SPEND
  WHEN NOT MATCHED 
    THEN INSERT (
      DATA_TS
      ,ACCOUNT_ID
      ,ACCOUNT_STATUS
      ,NETWORK_NAME
      ,NETWORK_NAME_ID
      ,CURRENCY_CODE
      ,CONVERSION_RATE
      ,CLICKS
      ,IMPRESSIONS
      ,NATIVE_SPEND
      ,SPEND
      )
  VALUES (
    S.DATA_TS
    ,S.ACCOUNT_ID
    ,S.ACCOUNT_STATUS
    ,S.NETWORK_NAME
    ,S.NETWORK_NAME_ID
    ,S.CURRENCY_CODE
    ,S.CONVERSION_RATE
    ,S.CLICKS
    ,S.IMPRESSIONS
    ,S.NATIVE_SPEND
    ,S.SPEND
  )
  $$,
  'Manual Spend', 'BI-1229: Publishing & Ginsu apple-news manual entry spend', true, 141, 1, '[24]'
  )
) S
ON D.JOB_LABEL = S.JOB_LABEL
WHEN MATCHED THEN UPDATE SET
    JOB_LABEL = S.JOB_LABEL,
    JOB_QUERY = S.JOB_QUERY,
    JOB_TYPE = S.JOB_TYPE,
    JOB_NOTE = S.JOB_NOTE,
    JOB_ENABLED = S.JOB_ENABLED,
    JOB_PRIORITY = S.JOB_PRIORITY,
    SCHEDULE_BATCH_ID = S.SCHEDULE_BATCH_ID,
    SCHEDULE_EXPRESSION = S.SCHEDULE_EXPRESSION
WHEN NOT MATCHED THEN INSERT (
    JOB_LABEL,
    JOB_QUERY,
    JOB_TYPE,
    JOB_NOTE,
    JOB_ENABLED,
    JOB_PRIORITY,
    SCHEDULE_BATCH_ID,
    SCHEDULE_EXPRESSION
)
VALUES (
    S.JOB_LABEL,
    S.JOB_QUERY,
    S.JOB_TYPE,
    S.JOB_NOTE,
    S.JOB_ENABLED,
    S.JOB_PRIORITY,
    S.SCHEDULE_BATCH_ID,
    S.SCHEDULE_EXPRESSION
);
--
-- get_mapquest_thryv_proportional_spend
--
MERGE INTO SINGLE_SNOW_QUERY_JOBS D
USING (
SELECT $1 JOB_LABEL
    ,$2 JOB_QUERY
    ,$3 JOB_TYPE
    ,$4 JOB_NOTE
    ,$5 JOB_ENABLED
    ,$6 JOB_PRIORITY
    ,$7 SCHEDULE_BATCH_ID
    ,PARSE_JSON($8) SCHEDULE_EXPRESSION
FROM VALUES (
  'get_mapquest_thryv_proportional_spend',
  $$
  MERGE INTO MANUAL_ENTRY.BUYSIDE_ACCOUNT_DATA_MANUAL_ENTRY D
  USING (
    SELECT A.DATA_TS
      ,A.ACCOUNT_ID
      ,'Active'::VARCHAR ACCOUNT_STATUS
      ,A.ACCOUNT_ID NETWORK_NAME
      ,A.NETWORK_ID NETWORK_NAME_ID
      ,COALESCE(A.CURRENCY_CODE, B.CURRENCY_CODE) CURRENCY_CODE
      ,1 CONVERSION_RATE
      ,NULL::NUMBER CLICKS
      ,NULL::NUMBER IMPRESSIONS
      ,ROUND(A.ESTIMATED_REVENUE * 0.45,4) NATIVE_SPEND
      ,ROUND(A.ESTIMATED_REVENUE * 0.45,4) SPEND
    FROM BI.MANUAL_ENTRY.SELLSIDE_DAILY_MANUAL_ENTRY A
    JOIN BI.COMMON.ACCOUNT_METADATA_MAPPINGS B
    ON A.ACCOUNT_ID = B.ACCOUNT_ID
      AND B.PROVIDER_ID = 51
    WHERE A.SELLSIDE_CONTRACT_ID = 14
    ) S
  ON D.DATA_TS = S.DATA_TS
    AND D.NETWORK_NAME_ID = S.NETWORK_NAME_ID
    AND D.ACCOUNT_ID = S.ACCOUNT_ID
  WHEN MATCHED AND D.NATIVE_SPEND != S.NATIVE_SPEND
    THEN UPDATE 
      SET ACCOUNT_STATUS = S.ACCOUNT_STATUS
        ,NETWORK_NAME = S.NETWORK_NAME
        ,CURRENCY_CODE = S.CURRENCY_CODE
        ,CONVERSION_RATE = S.CONVERSION_RATE
        ,CLICKS = S.CLICKS
        ,IMPRESSIONS = S.IMPRESSIONS
        ,NATIVE_SPEND = S.NATIVE_SPEND
        ,SPEND = S.SPEND
  WHEN NOT MATCHED 
    THEN INSERT (
      DATA_TS
      ,ACCOUNT_ID
      ,ACCOUNT_STATUS
      ,NETWORK_NAME
      ,NETWORK_NAME_ID
      ,CURRENCY_CODE
      ,CONVERSION_RATE
      ,CLICKS
      ,IMPRESSIONS
      ,NATIVE_SPEND
      ,SPEND
      )
  VALUES (
    S.DATA_TS
    ,S.ACCOUNT_ID
    ,S.ACCOUNT_STATUS
    ,S.NETWORK_NAME
    ,S.NETWORK_NAME_ID
    ,S.CURRENCY_CODE
    ,S.CONVERSION_RATE
    ,S.CLICKS
    ,S.IMPRESSIONS
    ,S.NATIVE_SPEND
    ,S.SPEND
  )
  $$,
  'Manual Spend', 'BI-1029: Change thryv spend to come from manual entry', true, 150, 1, '[7,10,13,16,19]'
  )
) S
ON D.JOB_LABEL = S.JOB_LABEL
WHEN MATCHED THEN UPDATE SET
    JOB_LABEL = S.JOB_LABEL,
    JOB_QUERY = S.JOB_QUERY,
    JOB_TYPE = S.JOB_TYPE,
    JOB_NOTE = S.JOB_NOTE,
    JOB_ENABLED = S.JOB_ENABLED,
    JOB_PRIORITY = S.JOB_PRIORITY,
    SCHEDULE_BATCH_ID = S.SCHEDULE_BATCH_ID,
    SCHEDULE_EXPRESSION = S.SCHEDULE_EXPRESSION
WHEN NOT MATCHED THEN INSERT (
    JOB_LABEL,
    JOB_QUERY,
    JOB_TYPE,
    JOB_NOTE,
    JOB_ENABLED,
    JOB_PRIORITY,
    SCHEDULE_BATCH_ID,
    SCHEDULE_EXPRESSION
)
VALUES (
    S.JOB_LABEL,
    S.JOB_QUERY,
    S.JOB_TYPE,
    S.JOB_NOTE,
    S.JOB_ENABLED,
    S.JOB_PRIORITY,
    S.SCHEDULE_BATCH_ID,
    S.SCHEDULE_EXPRESSION
);
--
-- get_shopping_criteo_google_sheet_spend
--
MERGE INTO SINGLE_SNOW_QUERY_JOBS D
USING (
SELECT $1 JOB_LABEL
    ,$2 JOB_QUERY
    ,$3 JOB_TYPE
    ,$4 JOB_NOTE
    ,$5 JOB_ENABLED
    ,$6 JOB_PRIORITY
    ,$7 SCHEDULE_BATCH_ID
    ,PARSE_JSON($8) SCHEDULE_EXPRESSION
FROM VALUES (
  'get_shopping_criteo_google_sheet_spend',
  $$
  MERGE INTO MANUAL_ENTRY.BUYSIDE_ACCOUNT_DATA_MANUAL_ENTRY D
  USING (
    SELECT A.DATA:"date"::DATE DATA_TS
      ,'criteo manual shopping spend' ACCOUNT_ID
      ,'Active' ACCOUNT_STATUS
      ,'Criteo' NETWORK_NAME
      ,B.ID NETWORK_NAME_ID
      ,'USD' CURRENCY_CODE
      ,1 CONVERSION_RATE
      ,NULL::NUMBER CLICKS
      ,NULL::NUMBER IMPRESSIONS
      ,REPLACE(TRIM(A.DATA:"criteo_spend",'$'),',')::FLOAT NATIVE_SPEND
      ,REPLACE(TRIM(A.DATA:"criteo_spend",'$'),',')::FLOAT SPEND
    FROM BI.MANUAL_ENTRY.SHOPPING_SPEND_MANUAL_ENTRY A
    JOIN BI.COMMON.NETWORK_NAMES B
    ON B.NETWORK_NAME = 'Criteo'
    WHERE A.DATA:"criteo_spend" != ''
      AND A.DATA:"date" != ''
    ) S
  ON D.DATA_TS = S.DATA_TS
    AND D.NETWORK_NAME_ID = S.NETWORK_NAME_ID
    AND D.ACCOUNT_ID = S.ACCOUNT_ID
  WHEN MATCHED AND D.NATIVE_SPEND != S.NATIVE_SPEND
    THEN UPDATE 
      SET ACCOUNT_STATUS = S.ACCOUNT_STATUS
        ,NETWORK_NAME = S.NETWORK_NAME
        ,CURRENCY_CODE = S.CURRENCY_CODE
        ,CONVERSION_RATE = S.CONVERSION_RATE
        ,CLICKS = S.CLICKS
        ,IMPRESSIONS = S.IMPRESSIONS
        ,NATIVE_SPEND = S.NATIVE_SPEND
        ,SPEND = S.SPEND
  WHEN NOT MATCHED 
    THEN INSERT (
      DATA_TS
      ,ACCOUNT_ID
      ,ACCOUNT_STATUS
      ,NETWORK_NAME
      ,NETWORK_NAME_ID
      ,CURRENCY_CODE
      ,CONVERSION_RATE
      ,CLICKS
      ,IMPRESSIONS
      ,NATIVE_SPEND
      ,SPEND
      )
  VALUES (
    S.DATA_TS
    ,S.ACCOUNT_ID
    ,S.ACCOUNT_STATUS
    ,S.NETWORK_NAME
    ,S.NETWORK_NAME_ID
    ,S.CURRENCY_CODE
    ,S.CONVERSION_RATE
    ,S.CLICKS
    ,S.IMPRESSIONS
    ,S.NATIVE_SPEND
    ,S.SPEND
  )
  $$,
  'Manual Spend', 'BI-1209: Shopping Criteo spend to come from manual entry', true, 160, 1, '[24]'
  )
) S
ON D.JOB_LABEL = S.JOB_LABEL
WHEN MATCHED THEN UPDATE SET
    JOB_LABEL = S.JOB_LABEL,
    JOB_QUERY = S.JOB_QUERY,
    JOB_TYPE = S.JOB_TYPE,
    JOB_NOTE = S.JOB_NOTE,
    JOB_ENABLED = S.JOB_ENABLED,
    JOB_PRIORITY = S.JOB_PRIORITY,
    SCHEDULE_BATCH_ID = S.SCHEDULE_BATCH_ID,
    SCHEDULE_EXPRESSION = S.SCHEDULE_EXPRESSION
WHEN NOT MATCHED THEN INSERT (
    JOB_LABEL,
    JOB_QUERY,
    JOB_TYPE,
    JOB_NOTE,
    JOB_ENABLED,
    JOB_PRIORITY,
    SCHEDULE_BATCH_ID,
    SCHEDULE_EXPRESSION
)
VALUES (
    S.JOB_LABEL,
    S.JOB_QUERY,
    S.JOB_TYPE,
    S.JOB_NOTE,
    S.JOB_ENABLED,
    S.JOB_PRIORITY,
    S.SCHEDULE_BATCH_ID,
    S.SCHEDULE_EXPRESSION
);
--
-- get_mapqust_clicktripz_google_sheet_revenue
--
MERGE INTO SINGLE_SNOW_QUERY_JOBS D
USING (
SELECT $1 JOB_LABEL
    ,$2 JOB_QUERY
    ,$3 JOB_TYPE
    ,$4 JOB_NOTE
    ,$5 JOB_ENABLED
    ,$6 JOB_PRIORITY
    ,$7 SCHEDULE_BATCH_ID
    ,PARSE_JSON($8) SCHEDULE_EXPRESSION
FROM VALUES (
  'get_mapqust_clicktripz_google_sheet_revenue',
  $$
  MERGE INTO MANUAL_ENTRY.SELLSIDE_MAPQUEST_CLICKTRIPZ_PERFORMANCE_MANUAL_ENTRY D
  USING (
    SELECT DATA:"data_date"::DATE DATA_TS
      ,'clicktripz'::VARCHAR NETWORK
      ,'clicktripz'::VARCHAR ACCOUNT_ID
      ,REPLACE(TRIM(DATA:"clicktripz_total_revenue",'$'),',')::FLOAT REVENUE_IN_LOCAL_CURRENCY
      ,REPLACE(TRIM(DATA:"clicktripz_total_revenue",'$'),',')::FLOAT REVENUE_IN_USD
      ,'USD'::VARCHAR LOCAL_CURRENCY
    FROM MANUAL_ENTRY.SELLSIDE_MAPQUEST_CLICKTRIPZ_PERFORMANCE_DAILY
    WHERE DATA:"clicktripz_total_revenue" != ''
      AND DATA:"data_date" != ''
    ) S
  ON D.DATA_TS = S.DATA_TS
    AND D.NETWORK = S.NETWORK
    AND D.ACCOUNT_ID = S.ACCOUNT_ID
    AND D.LOCAL_CURRENCY = S.LOCAL_CURRENCY
  WHEN MATCHED AND D.REVENUE_IN_LOCAL_CURRENCY != S.REVENUE_IN_LOCAL_CURRENCY
	THEN UPDATE SET 
      REVENUE_IN_LOCAL_CURRENCY = S.REVENUE_IN_LOCAL_CURRENCY,
      REVENUE_IN_USD = S.REVENUE_IN_USD
  WHEN NOT MATCHED THEN INSERT (
    DATA_TS
    ,NETWORK
    ,ACCOUNT_ID
    ,REVENUE_IN_LOCAL_CURRENCY
    ,REVENUE_IN_USD
    ,LOCAL_CURRENCY
  )
  VALUES (
    S.DATA_TS
    ,S.NETWORK
    ,S.ACCOUNT_ID
    ,S.REVENUE_IN_LOCAL_CURRENCY
    ,S.REVENUE_IN_USD
    ,S.LOCAL_CURRENCY
  )
  $$,
  'Manual Revenue', 'BI-1139: Re-formatted MapQuest ClickTripz performance daily', true, 210, 1, '[24]'
  )
) S
ON D.JOB_LABEL = S.JOB_LABEL
WHEN MATCHED THEN UPDATE SET
    JOB_LABEL = S.JOB_LABEL,
    JOB_QUERY = S.JOB_QUERY,
    JOB_TYPE = S.JOB_TYPE,
    JOB_NOTE = S.JOB_NOTE,
    JOB_ENABLED = S.JOB_ENABLED,
    JOB_PRIORITY = S.JOB_PRIORITY,
    SCHEDULE_BATCH_ID = S.SCHEDULE_BATCH_ID,
    SCHEDULE_EXPRESSION = S.SCHEDULE_EXPRESSION
WHEN NOT MATCHED THEN INSERT (
    JOB_LABEL,
    JOB_QUERY,
    JOB_TYPE,
    JOB_NOTE,
    JOB_ENABLED,
    JOB_PRIORITY,
    SCHEDULE_BATCH_ID,
    SCHEDULE_EXPRESSION
)
VALUES (
    S.JOB_LABEL,
    S.JOB_QUERY,
    S.JOB_TYPE,
    S.JOB_NOTE,
    S.JOB_ENABLED,
    S.JOB_PRIORITY,
    S.SCHEDULE_BATCH_ID,
    S.SCHEDULE_EXPRESSION
);
--
-- get_all_forecasted_manual_entry_revenue
--
MERGE INTO SINGLE_SNOW_QUERY_JOBS D
USING (
SELECT $1 JOB_LABEL
    ,$2 JOB_QUERY
    ,$3 JOB_TYPE
    ,$4 JOB_NOTE
    ,$5 JOB_ENABLED
    ,$6 JOB_PRIORITY
    ,$7 SCHEDULE_BATCH_ID
    ,$8::VARIANT SCHEDULE_EXPRESSION
FROM VALUES (
  'get_all_forecasted_manual_entry_revenue',
  $$
  CALL MANUAL_ENTRY.SELLSIDE_CONTRACT_MANUAL_ENTRY_DAILY_UPDATE(TO_VARCHAR(CURRENT_DATE()))
  $$,
  'Revenue Forecast', 'BI-860: Method to add manual entry data for revenue', true, 310, 2, '15 3/3-18 * * *'
  )
) S
ON D.JOB_LABEL = S.JOB_LABEL
WHEN MATCHED THEN UPDATE SET
    JOB_LABEL = S.JOB_LABEL,
    JOB_QUERY = S.JOB_QUERY,
    JOB_TYPE = S.JOB_TYPE,
    JOB_NOTE = S.JOB_NOTE,
    JOB_ENABLED = S.JOB_ENABLED,
    JOB_PRIORITY = S.JOB_PRIORITY,
    SCHEDULE_BATCH_ID = S.SCHEDULE_BATCH_ID,
    SCHEDULE_EXPRESSION = S.SCHEDULE_EXPRESSION
WHEN NOT MATCHED THEN INSERT (
    JOB_LABEL,
    JOB_QUERY,
    JOB_TYPE,
    JOB_NOTE,
    JOB_ENABLED,
    JOB_PRIORITY,
    SCHEDULE_BATCH_ID,
    SCHEDULE_EXPRESSION
)
VALUES (
    S.JOB_LABEL,
    S.JOB_QUERY,
    S.JOB_TYPE,
    S.JOB_NOTE,
    S.JOB_ENABLED,
    S.JOB_PRIORITY,
    S.SCHEDULE_BATCH_ID,
    S.SCHEDULE_EXPRESSION
);
--
-- set_all_forecasted_revenue_monthly_config
--
MERGE INTO SINGLE_SNOW_QUERY_JOBS D
USING (
SELECT $1 JOB_LABEL
    ,$2 JOB_QUERY
    ,$3 JOB_TYPE
    ,$4 JOB_NOTE
    ,$5 JOB_ENABLED
    ,$6 JOB_PRIORITY
    ,$7 SCHEDULE_BATCH_ID
    ,$8::VARIANT SCHEDULE_EXPRESSION
FROM VALUES (
  'set_all_forecasted_revenue_monthly_config',
  $$
  CALL MANUAL_ENTRY.SELLSIDE_CONTRACT_MANUAL_ENTRY_MONTHLY_RENEW (TO_VARCHAR(CURRENT_DATE()+1))
  $$,
  'Revenue Forecast', 'BI-860: Method to add manual entry data for revenue', true, 330, 2, '- 23 L * *'
  )
) S
ON D.JOB_LABEL = S.JOB_LABEL
WHEN MATCHED THEN UPDATE SET
    JOB_LABEL = S.JOB_LABEL,
    JOB_QUERY = S.JOB_QUERY,
    JOB_TYPE = S.JOB_TYPE,
    JOB_NOTE = S.JOB_NOTE,
    JOB_ENABLED = S.JOB_ENABLED,
    JOB_PRIORITY = S.JOB_PRIORITY,
    SCHEDULE_BATCH_ID = S.SCHEDULE_BATCH_ID,
    SCHEDULE_EXPRESSION = S.SCHEDULE_EXPRESSION
WHEN NOT MATCHED THEN INSERT (
    JOB_LABEL,
    JOB_QUERY,
    JOB_TYPE,
    JOB_NOTE,
    JOB_ENABLED,
    JOB_PRIORITY,
    SCHEDULE_BATCH_ID,
    SCHEDULE_EXPRESSION
)
VALUES (
    S.JOB_LABEL,
    S.JOB_QUERY,
    S.JOB_TYPE,
    S.JOB_NOTE,
    S.JOB_ENABLED,
    S.JOB_PRIORITY,
    S.SCHEDULE_BATCH_ID,
    S.SCHEDULE_EXPRESSION
);
--
-- pop_buyside_account_data_tracking
--
MERGE INTO SINGLE_SNOW_QUERY_JOBS D
USING (
SELECT $1 JOB_LABEL
    ,$2 JOB_QUERY
    ,$3 JOB_TYPE
    ,$4 JOB_NOTE
    ,$5 JOB_ENABLED
    ,$6 JOB_PRIORITY
    ,$7 SCHEDULE_BATCH_ID
    ,$8::VARIANT SCHEDULE_EXPRESSION
FROM VALUES (
  'pop_buyside_account_data_tracking',
  $$
  CALL ALERTS.BUYSIDE_ACCOUNT_DATA_TRACKING_SCHEDULER ();
  $$,
  'Data Poulation', 'BI-1194: Populating buyside account data tracking', true, 410, 2, '15 * * * *'
  )
) S
ON D.JOB_LABEL = S.JOB_LABEL
WHEN MATCHED THEN UPDATE SET
    JOB_LABEL = S.JOB_LABEL,
    JOB_QUERY = S.JOB_QUERY,
    JOB_TYPE = S.JOB_TYPE,
    JOB_NOTE = S.JOB_NOTE,
    JOB_ENABLED = S.JOB_ENABLED,
    JOB_PRIORITY = S.JOB_PRIORITY,
    SCHEDULE_BATCH_ID = S.SCHEDULE_BATCH_ID,
    SCHEDULE_EXPRESSION = S.SCHEDULE_EXPRESSION
WHEN NOT MATCHED THEN INSERT (
    JOB_LABEL,
    JOB_QUERY,
    JOB_TYPE,
    JOB_NOTE,
    JOB_ENABLED,
    JOB_PRIORITY,
    SCHEDULE_BATCH_ID,
    SCHEDULE_EXPRESSION
)
VALUES (
    S.JOB_LABEL,
    S.JOB_QUERY,
    S.JOB_TYPE,
    S.JOB_NOTE,
    S.JOB_ENABLED,
    S.JOB_PRIORITY,
    S.SCHEDULE_BATCH_ID,
    S.SCHEDULE_EXPRESSION
);
--
-- pop_sessions_and_pageviews_summary_data
--
MERGE INTO SINGLE_SNOW_QUERY_JOBS D
USING (
SELECT $1 JOB_LABEL
    ,$2 JOB_QUERY
    ,$3 JOB_TYPE
    ,$4 JOB_NOTE
    ,$5 JOB_ENABLED
    ,$6 JOB_PRIORITY
    ,$7 SCHEDULE_BATCH_ID
    ,$8::VARIANT SCHEDULE_EXPRESSION
FROM VALUES (
  'pop_sessions_and_pageviews_summary_data', 
  $$
  MERGE INTO TABLEAU.SESSIONS_PAGEVIEWS_SUMMARY T 
  USING ( 
    SELECT PST_DATE
      ,COALESCE(PL.ID, -1) PRODUCT_LINE_ID
      ,CHANNEL_GROUPING
      ,COALESCE(DEVICE:deviceCategory::TEXT, 'unknown') DEVICE_TYPE
      ,COUNT(DISTINCT SESSION_ID) DISTINCT_SESSIONS
      ,COUNT(*) TOTAL_SESSIONS
      ,SUM(PAGE_VIEWS) PAGEVIEWS
    FROM DATAMART.EVENTS.GA_SESSIONS S
    JOIN (
      SELECT DATASET_ID
        ,ENTITY_NAME
        ,BUSINESS_UNIT_DETAIL_NAME PRODUCT_LINE_NAME
      FROM ANALYSTS.MAPPING.BIGQUERY_DATASET_METADATA
      WHERE BUSINESS_UNIT_DETAIL_NAME LIKE ANY ('HSW/Organic','MapQuest','Social Publishing')
        AND ENTITY_NAME LIKE ANY (
          -- HSW/Organic
          'HowStuffWorks',

          -- MapQuest
          'MapQuest',
          --'MapQuest Extension',

          -- Social Publishing
          'iHeartVIP',
          'AutoVersed Quizzes',
          'Goliath Quizzes',
          'HSW Quizzes',
          'SportsBreak Quizzes',
          'Zoo Quizzes'
        )
      GROUP BY 1,2,3
    ) DS 
    ON S.DATASET_ID = DS.DATASET_ID
    LEFT JOIN BI.COMMON.PRODUCT_LINES PL
    ON DS.PRODUCT_LINE_NAME = PL.PRODUCT_LINE_NAME
    WHERE S.PST_DATE >= CURRENT_DATE()-3
    GROUP BY 1,2,3,4
    ) S 
  ON T.PST_DATE = S.PST_DATE
    AND T.PRODUCT_LINE_ID = S.PRODUCT_LINE_ID
    AND T.CHANNEL_GROUPING = S.CHANNEL_GROUPING
    AND T.DEVICE_TYPE = S.DEVICE_TYPE
  WHEN MATCHED THEN UPDATE SET 
    DISTINCT_SESSIONS = S.DISTINCT_SESSIONS,
    TOTAL_SESSIONS = S.TOTAL_SESSIONS,
    PAGEVIEWS = S.PAGEVIEWS 
  WHEN NOT MATCHED THEN INSERT(
    PST_DATE,
    PRODUCT_LINE_ID,
    CHANNEL_GROUPING,
    DEVICE_TYPE,
    DISTINCT_SESSIONS,
    TOTAL_SESSIONS,
    PAGEVIEWS
  ) 
  VALUES (
    S.PST_DATE,
    S.PRODUCT_LINE_ID,
    S.CHANNEL_GROUPING,
    S.DEVICE_TYPE,
    S.DISTINCT_SESSIONS,
    S.TOTAL_SESSIONS,
    S.PAGEVIEWS
  )
  $$,
  'Data Poulation', 'BI-1144: Populate sessions and pageviews summary', true, 420, 2, '15 10/2-19 * * *'
  )
) S
ON D.JOB_LABEL = S.JOB_LABEL
WHEN MATCHED THEN UPDATE SET
    JOB_LABEL = S.JOB_LABEL,
    JOB_QUERY = S.JOB_QUERY,
    JOB_TYPE = S.JOB_TYPE,
    JOB_NOTE = S.JOB_NOTE,
    JOB_ENABLED = S.JOB_ENABLED,
    JOB_PRIORITY = S.JOB_PRIORITY,
    SCHEDULE_BATCH_ID = S.SCHEDULE_BATCH_ID,
    SCHEDULE_EXPRESSION = S.SCHEDULE_EXPRESSION
WHEN NOT MATCHED THEN INSERT (
    JOB_LABEL,
    JOB_QUERY,
    JOB_TYPE,
    JOB_NOTE,
    JOB_ENABLED,
    JOB_PRIORITY,
    SCHEDULE_BATCH_ID,
    SCHEDULE_EXPRESSION
)
VALUES (
    S.JOB_LABEL,
    S.JOB_QUERY,
    S.JOB_TYPE,
    S.JOB_NOTE,
    S.JOB_ENABLED,
    S.JOB_PRIORITY,
    S.SCHEDULE_BATCH_ID,
    S.SCHEDULE_EXPRESSION
);
--
-- pop_ppd_report_numbers_daily_tracking
--
//MERGE INTO SINGLE_SNOW_QUERY_JOBS D
//USING (
//SELECT $1 JOB_LABEL
//    ,$2 JOB_QUERY
//    ,$3 JOB_TYPE
//    ,$4 JOB_NOTE
//    ,$5 JOB_ENABLED
//    ,$6 JOB_PRIORITY
//    ,$7 SCHEDULE_BATCH_ID
//    ,$8::VARIANT SCHEDULE_EXPRESSION
//FROM VALUES (
//  'pop_ppd_report_numbers_daily_tracking',
//  $$
//  INSERT INTO ALERTS.RECENT_5_DAYS_PPD_REPORT_NUMBERS_TRACKING
//  SELECT CURRENT_TIMESTAMP::DATE QUERY_DATE
//    ,DATE PPD_DATE
//    ,SITE_ID
//    ,SUM(ALLOCATED_BUYSIDE_SPEND) ALLOCATED_BUYSIDE_SPEND
//    ,SUM(REVENUE) REVENUE
//    ,SUM(YAHOO_QOOL_REVENUE) YAHOO_QOOL_REVENUE
//    ,SUM(YAHOO_S1_REVENUE) YAHOO_S1_REVENUE
//    ,SUM(GINSU_REVENUE) GINSU_REVENUE
//    ,SUM(GOOGLE_S1_REVENUE) GOOGLE_S1_REVENUE
//    ,SUM(GOOGLE_QOOL_REVENUE) GOOGLE_QOOL_REVENUE
//  FROM BI.TABLEAU.VIEW_PUB_PERFORMANCE_DAILY
//  WHERE DATE >= DATEADD(DAY, -5, CURRENT_TIMESTAMP)
//    AND DATE != CURRENT_TIMESTAMP::DATE
//    AND (
//      ALLOCATED_BUYSIDE_SPEND > 0
//      OR REVENUE > 0
//      )
//  GROUP BY 1,2,3
//  $$,
//  'Data Poulation', 'BI-1263: Track the pub_performance spend and revenue for the last 5 days', true, NULL, 2, '15 15 * * *'
//  )
//) S
//ON D.JOB_LABEL = S.JOB_LABEL
//WHEN MATCHED THEN UPDATE SET
//    JOB_LABEL = S.JOB_LABEL,
//    JOB_QUERY = S.JOB_QUERY,
//    JOB_TYPE = S.JOB_TYPE,
//    JOB_NOTE = S.JOB_NOTE,
//    JOB_ENABLED = S.JOB_ENABLED,
//    JOB_PRIORITY = S.JOB_PRIORITY,
//    SCHEDULE_BATCH_ID = S.SCHEDULE_BATCH_ID,
//    SCHEDULE_EXPRESSION = S.SCHEDULE_EXPRESSION
//WHEN NOT MATCHED THEN INSERT (
//    JOB_LABEL,
//    JOB_QUERY,
//    JOB_TYPE,
//    JOB_NOTE,
//    JOB_ENABLED,
//    JOB_PRIORITY,
//    SCHEDULE_BATCH_ID,
//    SCHEDULE_EXPRESSION
//)
//VALUES (
//    S.JOB_LABEL,
//    S.JOB_QUERY,
//    S.JOB_TYPE,
//    S.JOB_NOTE,
//    S.JOB_ENABLED,
//    S.JOB_PRIORITY,
//    S.SCHEDULE_BATCH_ID,
//    S.SCHEDULE_EXPRESSION
//);
--
-- pop_buyside_account_data_loading
--
MERGE INTO SINGLE_SNOW_QUERY_JOBS D
USING (
SELECT $1 JOB_LABEL
    ,$2 JOB_QUERY
    ,$3 JOB_TYPE
    ,$4 JOB_NOTE
    ,$5 JOB_ENABLED
    ,$6 JOB_PRIORITY
    ,$7 SCHEDULE_BATCH_ID
    ,$8::VARIANT SCHEDULE_EXPRESSION
FROM VALUES (
  'pop_buyside_account_data_loading',
  $$
  CALL DATA_AGGREGATOR('_TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_LOADING', 0, 1);
  $$,
  'Data Poulation', 'BI-1317: Test the buyside account data loading from DataMart directly', true, 510, 2, '15 2/3 * * *'
  )
) S
ON D.JOB_LABEL = S.JOB_LABEL
WHEN MATCHED THEN UPDATE SET
    JOB_LABEL = S.JOB_LABEL,
    JOB_QUERY = S.JOB_QUERY,
    JOB_TYPE = S.JOB_TYPE,
    JOB_NOTE = S.JOB_NOTE,
    JOB_ENABLED = S.JOB_ENABLED,
    JOB_PRIORITY = S.JOB_PRIORITY,
    SCHEDULE_BATCH_ID = S.SCHEDULE_BATCH_ID,
    SCHEDULE_EXPRESSION = S.SCHEDULE_EXPRESSION
WHEN NOT MATCHED THEN INSERT (
    JOB_LABEL,
    JOB_QUERY,
    JOB_TYPE,
    JOB_NOTE,
    JOB_ENABLED,
    JOB_PRIORITY,
    SCHEDULE_BATCH_ID,
    SCHEDULE_EXPRESSION
)
VALUES (
    S.JOB_LABEL,
    S.JOB_QUERY,
    S.JOB_TYPE,
    S.JOB_NOTE,
    S.JOB_ENABLED,
    S.JOB_PRIORITY,
    S.SCHEDULE_BATCH_ID,
    S.SCHEDULE_EXPRESSION
);
--
-- pop_buyside_account_data_publish
--
MERGE INTO SINGLE_SNOW_QUERY_JOBS D
USING (
SELECT $1 JOB_LABEL
    ,$2 JOB_QUERY
    ,$3 JOB_TYPE
    ,$4 JOB_NOTE
    ,$5 JOB_ENABLED
    ,$6 JOB_PRIORITY
    ,$7 SCHEDULE_BATCH_ID
    ,$8::VARIANT SCHEDULE_EXPRESSION
FROM VALUES (
  'pop_buyside_account_data_publish',
  $$
  ALTER TABLE IF EXISTS BI._TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_QA
  SWAP WITH BI._TABLE_LOADING.BUYSIDE_ACCOUNT_DATA_DAILY_LOADING;
  $$,
  'Data Poulation', 'BI-1317: Test the buyside account data loading from DataMart directly', true, 520, 2, '15 * * * *'
  )
) S
ON D.JOB_LABEL = S.JOB_LABEL
WHEN MATCHED THEN UPDATE SET
    JOB_LABEL = S.JOB_LABEL,
    JOB_QUERY = S.JOB_QUERY,
    JOB_TYPE = S.JOB_TYPE,
    JOB_NOTE = S.JOB_NOTE,
    JOB_ENABLED = S.JOB_ENABLED,
    JOB_PRIORITY = S.JOB_PRIORITY,
    SCHEDULE_BATCH_ID = S.SCHEDULE_BATCH_ID,
    SCHEDULE_EXPRESSION = S.SCHEDULE_EXPRESSION
WHEN NOT MATCHED THEN INSERT (
    JOB_LABEL,
    JOB_QUERY,
    JOB_TYPE,
    JOB_NOTE,
    JOB_ENABLED,
    JOB_PRIORITY,
    SCHEDULE_BATCH_ID,
    SCHEDULE_EXPRESSION
)
VALUES (
    S.JOB_LABEL,
    S.JOB_QUERY,
    S.JOB_TYPE,
    S.JOB_NOTE,
    S.JOB_ENABLED,
    S.JOB_PRIORITY,
    S.SCHEDULE_BATCH_ID,
    S.SCHEDULE_EXPRESSION
);
--
-- cut_historical_aggregation_logging
--
MERGE INTO SINGLE_SNOW_QUERY_JOBS D
USING (
SELECT $1 JOB_LABEL
    ,$2 JOB_QUERY
    ,$3 JOB_TYPE
    ,$4 JOB_NOTE
    ,$5 JOB_ENABLED
    ,$6 JOB_PRIORITY
    ,$7 SCHEDULE_BATCH_ID
    ,$8::VARIANT SCHEDULE_EXPRESSION
FROM VALUES (
  'cut_historical_aggregation_logging',
  $$
  DELETE FROM _CONTROL_LOGIC.DATA_AGGREGATION_LOGGING 
  WHERE EVENT_TIME < DATE_TRUNC('DAY', CURRENT_DATE - 7)
  $$,
  'Data Pruning', 'Internal: Prune the aggegation log older than 7 days', true, NULL, 2, '- - * * L'
  )
) S
ON D.JOB_LABEL = S.JOB_LABEL
WHEN MATCHED THEN UPDATE SET
    JOB_LABEL = S.JOB_LABEL,
    JOB_QUERY = S.JOB_QUERY,
    JOB_TYPE = S.JOB_TYPE,
    JOB_NOTE = S.JOB_NOTE,
    JOB_ENABLED = S.JOB_ENABLED,
    JOB_PRIORITY = S.JOB_PRIORITY,
    SCHEDULE_BATCH_ID = S.SCHEDULE_BATCH_ID,
    SCHEDULE_EXPRESSION = S.SCHEDULE_EXPRESSION
WHEN NOT MATCHED THEN INSERT (
    JOB_LABEL,
    JOB_QUERY,
    JOB_TYPE,
    JOB_NOTE,
    JOB_ENABLED,
    JOB_PRIORITY,
    SCHEDULE_BATCH_ID,
    SCHEDULE_EXPRESSION
)
VALUES (
    S.JOB_LABEL,
    S.JOB_QUERY,
    S.JOB_TYPE,
    S.JOB_NOTE,
    S.JOB_ENABLED,
    S.JOB_PRIORITY,
    S.SCHEDULE_BATCH_ID,
    S.SCHEDULE_EXPRESSION
);
-------------------------------------------------------------
-- Test or maually run the jobs 
-------------------------------------------------------------
--
-- Check the existing jobs
--
SELECT * 
FROM SINGLE_SNOW_QUERY_JOBS
//WHERE JOB_ENABLED = 1
//AND (ARRAY_CONTAINS(DATE_PART('HH',CURRENT_TIMESTAMP), SCHEDULE_EXPRESSION) 
//  OR ARRAY_CONTAINS(24, SCHEDULE_EXPRESSION)
//  OR JOB_ENABLED = 0)
ORDER BY SCHEDULE_BATCH_ID
    ,JOB_PRIORITY
;
--
-- modify an existing jobs
--
//UPDATE SINGLE_SNOW_QUERY_JOBS
//SET JOB_LABEL = 'get_all_forecasted_manual_entry_revenue',
//  TIME_OF_NEXT_SCHEDULE = NULL
//WHERE JOB_LABEL = 'get_all_forecasted_manual_entry_revenue'
//;
--
-- Call SP to test the un-enabled job
--
CALL SINGLE_SNOW_QUERY_JOB_SCHEDULER(false);
--
--
-- Call SP to run all enabled jobs
--
CALL SINGLE_SNOW_QUERY_JOB_SCHEDULER(true, 2);

-------------------------------------------------------------
-- Insert or update the finders 
-------------------------------------------------------------
--
-- map_syndication_drid_partner_to_product_line
--
MERGE INTO NEW_BUSINESS_ELEMENT_FINDERS D
USING (
SELECT $1 FINDER_LABEL
    ,$2 FINDER_QUERY
    ,$3 FINDER_TYPE
    ,$4 FINDER_NOTE
    ,$5 FINDER_ENABLED
    ,PARSE_JSON($6) HOURS_ON_SCHEDULE
FROM VALUES (
  'map_syndication_drid_partner_to_product_line',
  $$
  MERGE INTO COMMON.PARTNER_ID_TO_PRODUCT_LINE D
  USING (
    SELECT PARTNER_ID
        ,6::NUMBER PRODUCT_LINE_ID
        ,CURRENT_TIMESTAMP()::TIMESTAMP_NTZ INSERTED_TS
        ,CURRENT_TIMESTAMP()::TIMESTAMP_NTZ UPDATED_TS
    FROM DATAMART.SELLSIDE_NETWORK.GOOGLE_ADSENSE_DRID_PLATFORM_DAILY g
    JOIN DATAMART.COMMON.PARTNER p
    ON g.DOMAIN_REGISTRANT = p.DRID
    WHERE g.DATA_TS >= '2020-01-01'
    GROUP BY PARTNER_ID
    ) S
  ON D.PARTNER_ID = S.PARTNER_ID
  WHEN NOT MATCHED THEN INSERT (
      PARTNER_ID,
      PRODUCT_LINE_ID,
      INSERTED_TS,
      UPDATED_TS
    )
  VALUES (
      S.PARTNER_ID,
      S.PRODUCT_LINE_ID,
      S.INSERTED_TS,
      S.UPDATED_TS
  )
  $$,
  'Data Mapping', 'BI-1002 : New Partner_Id mapping for syndication from DRID', 1, '[24]'
  )
) S
ON D.FINDER_LABEL = S.FINDER_LABEL
WHEN MATCHED THEN UPDATE SET
    FINDER_LABEL = S.FINDER_LABEL,
    FINDER_QUERY = S.FINDER_QUERY,
    FINDER_TYPE = S.FINDER_TYPE,
    FINDER_NOTE = S.FINDER_NOTE,
    FINDER_ENABLED = S.FINDER_ENABLED,
    HOURS_ON_SCHEDULE = S.HOURS_ON_SCHEDULE
WHEN NOT MATCHED THEN INSERT (
    FINDER_LABEL,
    FINDER_QUERY,
    FINDER_TYPE,
    FINDER_NOTE,
    FINDER_ENABLED,
    HOURS_ON_SCHEDULE
)
VALUES (
    S.FINDER_LABEL,
    S.FINDER_QUERY,
    S.FINDER_TYPE,
    S.FINDER_NOTE,
    S.FINDER_ENABLED,
    S.HOURS_ON_SCHEDULE
);
--
-- map_ginsu_yahoo_source_tag_to_product_line
--
MERGE INTO NEW_BUSINESS_ELEMENT_FINDERS D
USING (
SELECT $1 FINDER_LABEL
    ,$2 FINDER_QUERY
    ,$3 FINDER_TYPE
    ,$4 FINDER_NOTE
    ,$5 FINDER_ENABLED
    ,PARSE_JSON($6) HOURS_ON_SCHEDULE
FROM VALUES (
  'map_ginsu_yahoo_source_tag_to_product_line',
  $$
  MERGE INTO BI.COMMON.YAHOO_SOURCE_TAG_PRODUCT_LINE_MAPPINGS D
  USING (
    SELECT SOURCE_TAG
        ,19 PRODUCT_LINE_ID
        ,CURRENT_TIMESTAMP()::TIMESTAMP_NTZ INSERTED_TS
        ,CURRENT_TIMESTAMP()::TIMESTAMP_NTZ UPDATED_TS
        ,'(Inserted by automated task)' NOTES
    FROM DATAMART.SELLSIDE_NETWORK.YAHOO_SOURCE_PLATFORM_PERFORMANCE_DAILY
    WHERE SOURCE_TAG LIKE 'yahoo_groy%'
      AND ACCOUNT_ID IN ('qool')
    GROUP BY 1
    ) S
  ON D.SOURCE_TAG = S.SOURCE_TAG
  WHEN NOT MATCHED THEN INSERT (
      SOURCE_TAG
      ,PRODUCT_LINE_ID
      ,INSERTED_TS
      ,UPDATED_TS
      ,NOTES
  )
  VALUES (
      S.SOURCE_TAG
      ,S.PRODUCT_LINE_ID
      ,S.INSERTED_TS
      ,S.UPDATED_TS
      ,S.NOTES
  )
  $$,
  'Data Mapping', 'BI-1047: New Source_Tag mapping for GINSU from Yahoo data', 1, '[24]'
  )
) S
ON D.FINDER_LABEL = S.FINDER_LABEL
WHEN MATCHED THEN UPDATE SET
    FINDER_LABEL = S.FINDER_LABEL,
    FINDER_QUERY = S.FINDER_QUERY,
    FINDER_TYPE = S.FINDER_TYPE,
    FINDER_NOTE = S.FINDER_NOTE,
    FINDER_ENABLED = S.FINDER_ENABLED,
    HOURS_ON_SCHEDULE = S.HOURS_ON_SCHEDULE
WHEN NOT MATCHED THEN INSERT (
    FINDER_LABEL,
    FINDER_QUERY,
    FINDER_TYPE,
    FINDER_NOTE,
    FINDER_ENABLED,
    HOURS_ON_SCHEDULE
)
VALUES (
    S.FINDER_LABEL,
    S.FINDER_QUERY,
    S.FINDER_TYPE,
    S.FINDER_NOTE,
    S.FINDER_ENABLED,
    S.HOURS_ON_SCHEDULE
);
--
-- map_distributed_search_partner_to_product_line
--
MERGE INTO NEW_BUSINESS_ELEMENT_FINDERS D
USING (
SELECT $1 FINDER_LABEL
    ,$2 FINDER_QUERY
    ,$3 FINDER_TYPE
    ,$4 FINDER_NOTE
    ,$5 FINDER_ENABLED
    ,PARSE_JSON($6) HOURS_ON_SCHEDULE
FROM VALUES (
  'map_distributed_search_partner_to_product_line',
  $$
  MERGE INTO BI.COMMON.PARTNER_ID_TO_PRODUCT_LINE D
  USING (
    SELECT PARTNER_ID
        ,12 PRODUCT_LINE_ID
        ,CURRENT_TIMESTAMP()::TIMESTAMP_NTZ INSERTED_TS
        ,CURRENT_TIMESTAMP()::TIMESTAMP_NTZ UPDATED_TS
    FROM DATAMART.COMMON.PARTNER_SCD_BDM
    WHERE LOWER(OWNERSHIP) = 'distribution'
    AND (SPEND_OWNER IS NULL OR LOWER(SPEND_OWNER) = 'partner')
    AND LOWER(STATUS) != 'inactive'
    ) S
  ON D.PARTNER_ID = S.PARTNER_ID
  WHEN NOT MATCHED THEN INSERT (
      PARTNER_ID
      ,PRODUCT_LINE_ID
      ,INSERTED_TS
      ,UPDATED_TS
  )
  VALUES (
      S.PARTNER_ID
      ,S.PRODUCT_LINE_ID
      ,S.INSERTED_TS
      ,S.UPDATED_TS
  )
  $$,
  'Data Mapping', 'BI-1102: New Partner_id mapping for distributed search', 1, '[24]'
  )
) S
ON D.FINDER_LABEL = S.FINDER_LABEL
WHEN MATCHED THEN UPDATE SET
    FINDER_LABEL = S.FINDER_LABEL,
    FINDER_QUERY = S.FINDER_QUERY,
    FINDER_TYPE = S.FINDER_TYPE,
    FINDER_NOTE = S.FINDER_NOTE,
    FINDER_ENABLED = S.FINDER_ENABLED,
    HOURS_ON_SCHEDULE = S.HOURS_ON_SCHEDULE
WHEN NOT MATCHED THEN INSERT (
    FINDER_LABEL,
    FINDER_QUERY,
    FINDER_TYPE,
    FINDER_NOTE,
    FINDER_ENABLED,
    HOURS_ON_SCHEDULE
)
VALUES (
    S.FINDER_LABEL,
    S.FINDER_QUERY,
    S.FINDER_TYPE,
    S.FINDER_NOTE,
    S.FINDER_ENABLED,
    S.HOURS_ON_SCHEDULE
);
--
-- pop_hsw_sessions_and_pageviews_summary_data
--
MERGE INTO NEW_BUSINESS_ELEMENT_FINDERS D
USING (
SELECT $1 FINDER_LABEL
    ,$2 FINDER_QUERY
    ,$3 FINDER_TYPE
    ,$4 FINDER_NOTE
    ,$5 FINDER_ENABLED
    ,PARSE_JSON($6) HOURS_ON_SCHEDULE
FROM VALUES (
  'pop_hsw_sessions_and_pageviews_summary_data',
  $$
  MERGE INTO TABLEAU.SESSIONS_PAGEVIEWS_HSW T 
  USING ( 
    SELECT PST_DATE
        ,CHANNEL_GROUPING
        ,COALESCE(DEVICE:deviceCategory::TEXT, 'unknown') DEVICE_TYPE
        ,COUNT(DISTINCT SESSION_ID) DISTINCT_SESSIONS
        ,COUNT(*) TOTAL_SESSIONS
        ,SUM(PAGE_VIEWS) PAGEVIEWS
    FROM DATAMART.EVENTS.GA_SESSIONS
    WHERE DATASET_ID = '76400255'
        --DATASET_ID IN (
        --SELECT DATASET_ID
        --FROM ANALYSTS.MAPPING.BIGQUERY_DATASET_METADATA
        --WHERE ENTITY_NAME = 'HowStuffWorks'
        --)
    AND PST_DATE >= CURRENT_DATE()-3
    GROUP BY 1,2,3
    ) S 
  ON T.PST_DATE = S.PST_DATE
  AND T.CHANNEL_GROUPING = S.CHANNEL_GROUPING
  AND T.DEVICE_TYPE = S.DEVICE_TYPE
  WHEN MATCHED THEN UPDATE SET 
      DISTINCT_SESSIONS = S.DISTINCT_SESSIONS,
      TOTAL_SESSIONS = S.TOTAL_SESSIONS,
      PAGEVIEWS = S.PAGEVIEWS 
  WHEN NOT MATCHED THEN INSERT(
    PST_DATE,
    CHANNEL_GROUPING,
    DEVICE_TYPE,
    DISTINCT_SESSIONS,
    TOTAL_SESSIONS,
    PAGEVIEWS
  ) 
  VALUES (
    S.PST_DATE,
    S.CHANNEL_GROUPING,
    S.DEVICE_TYPE,
    S.DISTINCT_SESSIONS,
    S.TOTAL_SESSIONS,
    S.PAGEVIEWS
  )
  $$,
  'Data Poulation', 'BI-1053: Populate HSW sessions and pageviews with device_type', 1, '[10,11,12,13,14,15,16]'
  )
) S
ON D.FINDER_LABEL = S.FINDER_LABEL
WHEN MATCHED THEN UPDATE SET
    FINDER_LABEL = S.FINDER_LABEL,
    FINDER_QUERY = S.FINDER_QUERY,
    FINDER_TYPE = S.FINDER_TYPE,
    FINDER_NOTE = S.FINDER_NOTE,
    FINDER_ENABLED = S.FINDER_ENABLED,
    HOURS_ON_SCHEDULE = S.HOURS_ON_SCHEDULE
WHEN NOT MATCHED THEN INSERT (
    FINDER_LABEL,
    FINDER_QUERY,
    FINDER_TYPE,
    FINDER_NOTE,
    FINDER_ENABLED,
    HOURS_ON_SCHEDULE
)
VALUES (
    S.FINDER_LABEL,
    S.FINDER_QUERY,
    S.FINDER_TYPE,
    S.FINDER_NOTE,
    S.FINDER_ENABLED,
    S.HOURS_ON_SCHEDULE
);
--
-- get_mapqust_clicktripz_google_sheet_revenue
--
MERGE INTO NEW_BUSINESS_ELEMENT_FINDERS D
USING (
SELECT $1 FINDER_LABEL
    ,$2 FINDER_QUERY
    ,$3 FINDER_TYPE
    ,$4 FINDER_NOTE
    ,$5 FINDER_ENABLED
    ,PARSE_JSON($6) HOURS_ON_SCHEDULE
FROM VALUES (
  'get_mapqust_clicktripz_google_sheet_revenue',
  $$
  MERGE INTO MANUAL_ENTRY.SELLSIDE_MAPQUEST_CLICKTRIPZ_PERFORMANCE_MANUAL_ENTRY D
  USING (
    SELECT DATA:"data_date"::DATE DATA_TS
      ,'clicktripz'::VARCHAR NETWORK
      ,'clicktripz'::VARCHAR ACCOUNT_ID
      ,REPLACE(DATA:"clicktripz_total_revenue",',')::FLOAT REVENUE_IN_LOCAL_CURRENCY
      ,REPLACE(DATA:"clicktripz_total_revenue",',')::FLOAT REVENUE_IN_USD
      ,'USD'::VARCHAR LOCAL_CURRENCY
    FROM MANUAL_ENTRY.SELLSIDE_MAPQUEST_CLICKTRIPZ_PERFORMANCE_DAILY
    ) S
  ON D.DATA_TS = S.DATA_TS
    AND D.NETWORK = S.NETWORK
    AND D.ACCOUNT_ID = S.ACCOUNT_ID
    AND D.LOCAL_CURRENCY = S.LOCAL_CURRENCY
  WHEN MATCHED AND D.REVENUE_IN_LOCAL_CURRENCY != S.REVENUE_IN_LOCAL_CURRENCY
	THEN UPDATE SET 
      REVENUE_IN_LOCAL_CURRENCY = S.REVENUE_IN_LOCAL_CURRENCY,
      REVENUE_IN_USD = S.REVENUE_IN_USD
  WHEN NOT MATCHED THEN INSERT (
    DATA_TS
    ,NETWORK
    ,ACCOUNT_ID
    ,REVENUE_IN_LOCAL_CURRENCY
    ,REVENUE_IN_USD
    ,LOCAL_CURRENCY
  )
  VALUES (
    S.DATA_TS
    ,S.NETWORK
    ,S.ACCOUNT_ID
    ,S.REVENUE_IN_LOCAL_CURRENCY
    ,S.REVENUE_IN_USD
    ,S.LOCAL_CURRENCY
  )
  $$,
  'Manual Entry', 'BI-1139: Re-formatted MapQuest ClickTripz performance daily', 1, '[24]'
  )
) S
ON D.FINDER_LABEL = S.FINDER_LABEL
WHEN MATCHED THEN UPDATE SET
    FINDER_LABEL = S.FINDER_LABEL,
    FINDER_QUERY = S.FINDER_QUERY,
    FINDER_TYPE = S.FINDER_TYPE,
    FINDER_NOTE = S.FINDER_NOTE,
    FINDER_ENABLED = S.FINDER_ENABLED,
    HOURS_ON_SCHEDULE = S.HOURS_ON_SCHEDULE
WHEN NOT MATCHED THEN INSERT (
    FINDER_LABEL,
    FINDER_QUERY,
    FINDER_TYPE,
    FINDER_NOTE,
    FINDER_ENABLED,
    HOURS_ON_SCHEDULE
)
VALUES (
    S.FINDER_LABEL,
    S.FINDER_QUERY,
    S.FINDER_TYPE,
    S.FINDER_NOTE,
    S.FINDER_ENABLED,
    S.HOURS_ON_SCHEDULE
);
--
-- pop_sessions_and_pageviews_summary_data
--
MERGE INTO NEW_BUSINESS_ELEMENT_FINDERS D
USING (
SELECT $1 FINDER_LABEL
    ,$2 FINDER_QUERY
    ,$3 FINDER_TYPE
    ,$4 FINDER_NOTE
    ,$5 FINDER_ENABLED
    ,PARSE_JSON($6) HOURS_ON_SCHEDULE
FROM VALUES (
  'pop_sessions_and_pageviews_summary_data', 
  $$
  MERGE INTO TABLEAU.SESSIONS_PAGEVIEWS_SUMMARY T 
  USING ( 
    SELECT PST_DATE
        ,COALESCE(PL.ID, -1) PRODUCT_LINE_ID
        ,CHANNEL_GROUPING
        ,COALESCE(DEVICE:deviceCategory::TEXT, 'unknown') DEVICE_TYPE
        ,COUNT(DISTINCT SESSION_ID) DISTINCT_SESSIONS
        ,COUNT(*) TOTAL_SESSIONS
        ,SUM(PAGE_VIEWS) PAGEVIEWS
    FROM DATAMART.EVENTS.GA_SESSIONS S
    JOIN (
        SELECT DATASET_ID
            ,ENTITY_NAME
            ,CASE ENTITY_NAME 
                  WHEN 'HowStuffWorks' THEN 'HSW/Organic' 
                  WHEN 'MapQuest Extension' THEN 'MapQuest' 
                  ELSE ENTITY_NAME 
                END PRODUCT_LINE_NAME
        FROM ANALYSTS.MAPPING.BIGQUERY_DATASET_METADATA
        WHERE ENTITY_NAME LIKE ANY ('HowStuffWorks','MapQuest%')
        GROUP BY 1, 2
    ) DS 
    ON S.DATASET_ID = DS.DATASET_ID
    LEFT JOIN BI.COMMON.PRODUCT_LINES PL
    ON DS.PRODUCT_LINE_NAME = PL.PRODUCT_LINE_NAME
    WHERE S.PST_DATE >= CURRENT_DATE()-3
    GROUP BY 1,2,3,4
    ) S 
  ON T.PST_DATE = S.PST_DATE
  AND T.PRODUCT_LINE_ID = S.PRODUCT_LINE_ID
  AND T.CHANNEL_GROUPING = S.CHANNEL_GROUPING
  AND T.DEVICE_TYPE = S.DEVICE_TYPE
  WHEN MATCHED THEN UPDATE SET 
      DISTINCT_SESSIONS = S.DISTINCT_SESSIONS,
      TOTAL_SESSIONS = S.TOTAL_SESSIONS,
      PAGEVIEWS = S.PAGEVIEWS 
  WHEN NOT MATCHED THEN INSERT(
    PST_DATE,
    PRODUCT_LINE_ID,
    CHANNEL_GROUPING,
    DEVICE_TYPE,
    DISTINCT_SESSIONS,
    TOTAL_SESSIONS,
    PAGEVIEWS
  ) 
  VALUES (
    S.PST_DATE,
    S.PRODUCT_LINE_ID,
    S.CHANNEL_GROUPING,
    S.DEVICE_TYPE,
    S.DISTINCT_SESSIONS,
    S.TOTAL_SESSIONS,
    S.PAGEVIEWS
  )
  $$,
  'Data Poulation', 'BI-1144: Populate sessions and pageviews summary', 1, '[10,12,14,16,18]'
  )
) S
ON D.FINDER_LABEL = S.FINDER_LABEL
WHEN MATCHED THEN UPDATE SET
    FINDER_LABEL = S.FINDER_LABEL,
    FINDER_QUERY = S.FINDER_QUERY,
    FINDER_TYPE = S.FINDER_TYPE,
    FINDER_NOTE = S.FINDER_NOTE,
    FINDER_ENABLED = S.FINDER_ENABLED,
    HOURS_ON_SCHEDULE = S.HOURS_ON_SCHEDULE
WHEN NOT MATCHED THEN INSERT (
    FINDER_LABEL,
    FINDER_QUERY,
    FINDER_TYPE,
    FINDER_NOTE,
    FINDER_ENABLED,
    HOURS_ON_SCHEDULE
)
VALUES (
    S.FINDER_LABEL,
    S.FINDER_QUERY,
    S.FINDER_TYPE,
    S.FINDER_NOTE,
    S.FINDER_ENABLED,
    S.HOURS_ON_SCHEDULE
);
-------------------------------------------------------------
-- Test or maually run the finders 
-------------------------------------------------------------
--
-- Check the existing finders
--
SELECT * 
FROM NEW_BUSINESS_ELEMENT_FINDERS
//WHERE FINDER_ENABLED = 1
//AND (ARRAY_CONTAINS(DATE_PART('HH',CURRENT_TIMESTAMP), HOURS_ON_SCHEDULE) 
//  OR ARRAY_CONTAINS(24, HOURS_ON_SCHEDULE)
//  OR FINDER_ENABLED = 0)
;
--
-- Call SP to test the un-enabled finder
--
CALL NEW_BUSINESS_ELEMENT_REFRESH(false);
--
--
-- Call SP to run all enabled finders
--
CALL NEW_BUSINESS_ELEMENT_REFRESH(true);

USE DATABASE BI;
USE DATABASE BI_TEST;
USE SCHEMA _CONTROL_LOGIC;
-------------------------------------------------------------
-- Insert or update the jobs 
-------------------------------------------------------------
--
-- map_syndication_drid_partner_to_product_line
--
MERGE INTO SINGLE_SNOW_QUERY_JOBS D
USING (
SELECT $1 JOB_LABEL
    ,$2 JOB_QUERY
    ,$3 JOB_TYPE
    ,$4 JOB_NOTE
    ,$5 JOB_ENABLED
    ,$6 JOB_PRIORITY
    ,$7 SCHEDULE_BATCH_ID
    ,PARSE_JSON($8) SCHEDULE_EXPRESSION
FROM VALUES (
  'map_syndication_drid_partner_to_product_line',
  $$
  MERGE INTO COMMON.PARTNER_ID_TO_PRODUCT_LINE D
  USING (
    SELECT PARTNER_ID
        ,6::NUMBER PRODUCT_LINE_ID
        ,CURRENT_TIMESTAMP()::TIMESTAMP_NTZ INSERTED_TS
        ,CURRENT_TIMESTAMP()::TIMESTAMP_NTZ UPDATED_TS
    FROM DATAMART.SELLSIDE_NETWORK.GOOGLE_ADSENSE_DRID_PLATFORM_DAILY g
    JOIN DATAMART.COMMON.PARTNER p
    ON g.DOMAIN_REGISTRANT = p.DRID
    WHERE g.DATA_TS >= '2020-01-01'
    GROUP BY PARTNER_ID
    ) S
  ON D.PARTNER_ID = S.PARTNER_ID
  WHEN NOT MATCHED THEN INSERT (
      PARTNER_ID,
      PRODUCT_LINE_ID,
      INSERTED_TS,
      UPDATED_TS
    )
  VALUES (
      S.PARTNER_ID,
      S.PRODUCT_LINE_ID,
      S.INSERTED_TS,
      S.UPDATED_TS
  )
  $$,
  'Data Mapping', 'BI-1002 : New Partner_Id mapping for syndication from DRID', 1, 10, 1, '[24]'
  )
) S
ON D.JOB_LABEL = S.JOB_LABEL
WHEN MATCHED THEN UPDATE SET
    JOB_LABEL = S.JOB_LABEL,
    JOB_QUERY = S.JOB_QUERY,
    JOB_TYPE = S.JOB_TYPE,
    JOB_NOTE = S.JOB_NOTE,
    JOB_ENABLED = S.JOB_ENABLED,
    JOB_PRIORITY = S.JOB_PRIORITY,
    SCHEDULE_BATCH_ID = S.SCHEDULE_BATCH_ID,
    SCHEDULE_EXPRESSION = S.SCHEDULE_EXPRESSION
WHEN NOT MATCHED THEN INSERT (
    JOB_LABEL,
    JOB_QUERY,
    JOB_TYPE,
    JOB_NOTE,
    JOB_ENABLED,
    JOB_PRIORITY,
    SCHEDULE_BATCH_ID,
    SCHEDULE_EXPRESSION
)
VALUES (
    S.JOB_LABEL,
    S.JOB_QUERY,
    S.JOB_TYPE,
    S.JOB_NOTE,
    S.JOB_ENABLED,
    S.JOB_PRIORITY,
    S.SCHEDULE_BATCH_ID,
    S.SCHEDULE_EXPRESSION
);
--
-- map_ginsu_yahoo_source_tag_to_product_line
--
MERGE INTO SINGLE_SNOW_QUERY_JOBS D
USING (
SELECT $1 JOB_LABEL
    ,$2 JOB_QUERY
    ,$3 JOB_TYPE
    ,$4 JOB_NOTE
    ,$5 JOB_ENABLED
    ,$6 JOB_PRIORITY
    ,$7 SCHEDULE_BATCH_ID
    ,PARSE_JSON($8) SCHEDULE_EXPRESSION
FROM VALUES (
  'map_ginsu_yahoo_source_tag_to_product_line',
  $$
  MERGE INTO BI.COMMON.YAHOO_SOURCE_TAG_PRODUCT_LINE_MAPPINGS D
  USING (
    SELECT SOURCE_TAG
        ,19 PRODUCT_LINE_ID
        ,CURRENT_TIMESTAMP()::TIMESTAMP_NTZ INSERTED_TS
        ,CURRENT_TIMESTAMP()::TIMESTAMP_NTZ UPDATED_TS
        ,'(Inserted by automated task)' NOTES
    FROM DATAMART.SELLSIDE_NETWORK.YAHOO_SOURCE_PLATFORM_PERFORMANCE_DAILY
    WHERE SOURCE_TAG LIKE 'yahoo_groy%'
      AND ACCOUNT_ID IN ('qool')
    GROUP BY 1
    ) S
  ON D.SOURCE_TAG = S.SOURCE_TAG
  WHEN NOT MATCHED THEN INSERT (
      SOURCE_TAG
      ,PRODUCT_LINE_ID
      ,INSERTED_TS
      ,UPDATED_TS
      ,NOTES
  )
  VALUES (
      S.SOURCE_TAG
      ,S.PRODUCT_LINE_ID
      ,S.INSERTED_TS
      ,S.UPDATED_TS
      ,S.NOTES
  )
  $$,
  'Data Mapping', 'BI-1047: New Source_Tag mapping for GINSU from Yahoo data', 1, 20, 1, '[24]'
  )
) S
ON D.JOB_LABEL = S.JOB_LABEL
WHEN MATCHED THEN UPDATE SET
    JOB_LABEL = S.JOB_LABEL,
    JOB_QUERY = S.JOB_QUERY,
    JOB_TYPE = S.JOB_TYPE,
    JOB_NOTE = S.JOB_NOTE,
    JOB_ENABLED = S.JOB_ENABLED,
    JOB_PRIORITY = S.JOB_PRIORITY,
    SCHEDULE_BATCH_ID = S.SCHEDULE_BATCH_ID,
    SCHEDULE_EXPRESSION = S.SCHEDULE_EXPRESSION
WHEN NOT MATCHED THEN INSERT (
    JOB_LABEL,
    JOB_QUERY,
    JOB_TYPE,
    JOB_NOTE,
    JOB_ENABLED,
    JOB_PRIORITY,
    SCHEDULE_BATCH_ID,
    SCHEDULE_EXPRESSION
)
VALUES (
    S.JOB_LABEL,
    S.JOB_QUERY,
    S.JOB_TYPE,
    S.JOB_NOTE,
    S.JOB_ENABLED,
    S.JOB_PRIORITY,
    S.SCHEDULE_BATCH_ID,
    S.SCHEDULE_EXPRESSION
);
--
-- map_distributed_search_partner_to_product_line
--
MERGE INTO SINGLE_SNOW_QUERY_JOBS D
USING (
SELECT $1 JOB_LABEL
    ,$2 JOB_QUERY
    ,$3 JOB_TYPE
    ,$4 JOB_NOTE
    ,$5 JOB_ENABLED
    ,$6 JOB_PRIORITY
    ,$7 SCHEDULE_BATCH_ID
    ,PARSE_JSON($8) SCHEDULE_EXPRESSION
FROM VALUES (
  'map_distributed_search_partner_to_product_line',
  $$
  MERGE INTO BI.COMMON.PARTNER_ID_TO_PRODUCT_LINE D
  USING (
    SELECT PARTNER_ID
        ,12 PRODUCT_LINE_ID
        ,CURRENT_TIMESTAMP()::TIMESTAMP_NTZ INSERTED_TS
        ,CURRENT_TIMESTAMP()::TIMESTAMP_NTZ UPDATED_TS
    FROM DATAMART.COMMON.PARTNER_SCD_BDM
    WHERE LOWER(OWNERSHIP) = 'distribution'
    AND (SPEND_OWNER IS NULL OR LOWER(SPEND_OWNER) = 'partner')
    AND LOWER(STATUS) != 'inactive'
    ) S
  ON D.PARTNER_ID = S.PARTNER_ID
  WHEN NOT MATCHED THEN INSERT (
      PARTNER_ID
      ,PRODUCT_LINE_ID
      ,INSERTED_TS
      ,UPDATED_TS
  )
  VALUES (
      S.PARTNER_ID
      ,S.PRODUCT_LINE_ID
      ,S.INSERTED_TS
      ,S.UPDATED_TS
  )
  $$,
  'Data Mapping', 'BI-1102: New Partner_id mapping for distributed search', 1, 30, 1, '[24]'
  )
) S
ON D.JOB_LABEL = S.JOB_LABEL
WHEN MATCHED THEN UPDATE SET
    JOB_LABEL = S.JOB_LABEL,
    JOB_QUERY = S.JOB_QUERY,
    JOB_TYPE = S.JOB_TYPE,
    JOB_NOTE = S.JOB_NOTE,
    JOB_ENABLED = S.JOB_ENABLED,
    JOB_PRIORITY = S.JOB_PRIORITY,
    SCHEDULE_BATCH_ID = S.SCHEDULE_BATCH_ID,
    SCHEDULE_EXPRESSION = S.SCHEDULE_EXPRESSION
WHEN NOT MATCHED THEN INSERT (
    JOB_LABEL,
    JOB_QUERY,
    JOB_TYPE,
    JOB_NOTE,
    JOB_ENABLED,
    JOB_PRIORITY,
    SCHEDULE_BATCH_ID,
    SCHEDULE_EXPRESSION
)
VALUES (
    S.JOB_LABEL,
    S.JOB_QUERY,
    S.JOB_TYPE,
    S.JOB_NOTE,
    S.JOB_ENABLED,
    S.JOB_PRIORITY,
    S.SCHEDULE_BATCH_ID,
    S.SCHEDULE_EXPRESSION
);
--
-- pop_hsw_sessions_and_pageviews_summary_data
--
//DELETE FROM SINGLE_SNOW_QUERY_JOBS WHERE JOB_LABEL = 'pop_hsw_sessions_and_pageviews_summary_data';
//--
//MERGE INTO SINGLE_SNOW_QUERY_JOBS D
//USING (
//SELECT $1 JOB_LABEL
//    ,$2 JOB_QUERY
//    ,$3 JOB_TYPE
//    ,$4 JOB_NOTE
//    ,$5 JOB_ENABLED
//    ,$6 JOB_PRIORITY
//    ,$7 SCHEDULE_BATCH_ID
//    ,PARSE_JSON($8) SCHEDULE_EXPRESSION
//FROM VALUES (
//  'pop_hsw_sessions_and_pageviews_summary_data',
//  $$
//  MERGE INTO TABLEAU.SESSIONS_PAGEVIEWS_HSW T 
//  USING ( 
//    SELECT PST_DATE
//        ,CHANNEL_GROUPING
//        ,COALESCE(DEVICE:deviceCategory::TEXT, 'unknown') DEVICE_TYPE
//        ,COUNT(DISTINCT SESSION_ID) DISTINCT_SESSIONS
//        ,COUNT(*) TOTAL_SESSIONS
//        ,SUM(PAGE_VIEWS) PAGEVIEWS
//    FROM DATAMART.EVENTS.GA_SESSIONS
//    WHERE DATASET_ID = '76400255'
//        --DATASET_ID IN (
//        --SELECT DATASET_ID
//        --FROM ANALYSTS.MAPPING.BIGQUERY_DATASET_METADATA
//        --WHERE ENTITY_NAME = 'HowStuffWorks'
//        --)
//    AND PST_DATE >= CURRENT_DATE()-3
//    GROUP BY 1,2,3
//    ) S 
//  ON T.PST_DATE = S.PST_DATE
//  AND T.CHANNEL_GROUPING = S.CHANNEL_GROUPING
//  AND T.DEVICE_TYPE = S.DEVICE_TYPE
//  WHEN MATCHED THEN UPDATE SET 
//      DISTINCT_SESSIONS = S.DISTINCT_SESSIONS,
//      TOTAL_SESSIONS = S.TOTAL_SESSIONS,
//      PAGEVIEWS = S.PAGEVIEWS 
//  WHEN NOT MATCHED THEN INSERT(
//    PST_DATE,
//    CHANNEL_GROUPING,
//    DEVICE_TYPE,
//    DISTINCT_SESSIONS,
//    TOTAL_SESSIONS,
//    PAGEVIEWS
//  ) 
//  VALUES (
//    S.PST_DATE,
//    S.CHANNEL_GROUPING,
//    S.DEVICE_TYPE,
//    S.DISTINCT_SESSIONS,
//    S.TOTAL_SESSIONS,
//    S.PAGEVIEWS
//  )
//  $$,
//  'Data Poulation', 'BI-1053: Populate HSW sessions and pageviews with device_type', 0, 1, '[10,11,12,13,14,15,16]'
//  )
//) S
//ON D.JOB_LABEL = S.JOB_LABEL
//WHEN MATCHED THEN UPDATE SET
//    JOB_LABEL = S.JOB_LABEL,
//    JOB_QUERY = S.JOB_QUERY,
//    JOB_TYPE = S.JOB_TYPE,
//    JOB_NOTE = S.JOB_NOTE,
//    JOB_ENABLED = S.JOB_ENABLED,
//    JOB_PRIORITY = S.JOB_PRIORITY,
//    SCHEDULE_BATCH_ID = S.SCHEDULE_BATCH_ID,
//    SCHEDULE_EXPRESSION = S.SCHEDULE_EXPRESSION
//WHEN NOT MATCHED THEN INSERT (
//    JOB_LABEL,
//    JOB_QUERY,
//    JOB_TYPE,
//    JOB_NOTE,
//    JOB_ENABLED,
//    JOB_PRIORITY,
//    SCHEDULE_BATCH_ID,
//    SCHEDULE_EXPRESSION
//)
//VALUES (
//    S.JOB_LABEL,
//    S.JOB_QUERY,
//    S.JOB_TYPE,
//    S.JOB_NOTE,
//    S.JOB_ENABLED,
//    S.JOB_PRIORITY,
//    S.SCHEDULE_BATCH_ID,
//    S.SCHEDULE_EXPRESSION
//);
--
-- get_mapqust_clicktripz_google_sheet_revenue
--
MERGE INTO SINGLE_SNOW_QUERY_JOBS D
USING (
SELECT $1 JOB_LABEL
    ,$2 JOB_QUERY
    ,$3 JOB_TYPE
    ,$4 JOB_NOTE
    ,$5 JOB_ENABLED
    ,$6 JOB_PRIORITY
    ,$7 SCHEDULE_BATCH_ID
    ,PARSE_JSON($8) SCHEDULE_EXPRESSION
FROM VALUES (
  'get_mapqust_clicktripz_google_sheet_revenue',
  $$
  MERGE INTO MANUAL_ENTRY.SELLSIDE_MAPQUEST_CLICKTRIPZ_PERFORMANCE_MANUAL_ENTRY D
  USING (
    SELECT DATA:"data_date"::DATE DATA_TS
      ,'clicktripz'::VARCHAR NETWORK
      ,'clicktripz'::VARCHAR ACCOUNT_ID
      ,REPLACE(DATA:"clicktripz_total_revenue",',')::FLOAT REVENUE_IN_LOCAL_CURRENCY
      ,REPLACE(DATA:"clicktripz_total_revenue",',')::FLOAT REVENUE_IN_USD
      ,'USD'::VARCHAR LOCAL_CURRENCY
    FROM MANUAL_ENTRY.SELLSIDE_MAPQUEST_CLICKTRIPZ_PERFORMANCE_DAILY
    ) S
  ON D.DATA_TS = S.DATA_TS
    AND D.NETWORK = S.NETWORK
    AND D.ACCOUNT_ID = S.ACCOUNT_ID
    AND D.LOCAL_CURRENCY = S.LOCAL_CURRENCY
  WHEN MATCHED AND D.REVENUE_IN_LOCAL_CURRENCY != S.REVENUE_IN_LOCAL_CURRENCY
	THEN UPDATE SET 
      REVENUE_IN_LOCAL_CURRENCY = S.REVENUE_IN_LOCAL_CURRENCY,
      REVENUE_IN_USD = S.REVENUE_IN_USD
  WHEN NOT MATCHED THEN INSERT (
    DATA_TS
    ,NETWORK
    ,ACCOUNT_ID
    ,REVENUE_IN_LOCAL_CURRENCY
    ,REVENUE_IN_USD
    ,LOCAL_CURRENCY
  )
  VALUES (
    S.DATA_TS
    ,S.NETWORK
    ,S.ACCOUNT_ID
    ,S.REVENUE_IN_LOCAL_CURRENCY
    ,S.REVENUE_IN_USD
    ,S.LOCAL_CURRENCY
  )
  $$,
  'Manual Entry', 'BI-1139: Re-formatted MapQuest ClickTripz performance daily', 1, 100, 1, '[24]'
  )
) S
ON D.JOB_LABEL = S.JOB_LABEL
WHEN MATCHED THEN UPDATE SET
    JOB_LABEL = S.JOB_LABEL,
    JOB_QUERY = S.JOB_QUERY,
    JOB_TYPE = S.JOB_TYPE,
    JOB_NOTE = S.JOB_NOTE,
    JOB_ENABLED = S.JOB_ENABLED,
    JOB_PRIORITY = S.JOB_PRIORITY,
    SCHEDULE_BATCH_ID = S.SCHEDULE_BATCH_ID,
    SCHEDULE_EXPRESSION = S.SCHEDULE_EXPRESSION
WHEN NOT MATCHED THEN INSERT (
    JOB_LABEL,
    JOB_QUERY,
    JOB_TYPE,
    JOB_NOTE,
    JOB_ENABLED,
    JOB_PRIORITY,
    SCHEDULE_BATCH_ID,
    SCHEDULE_EXPRESSION
)
VALUES (
    S.JOB_LABEL,
    S.JOB_QUERY,
    S.JOB_TYPE,
    S.JOB_NOTE,
    S.JOB_ENABLED,
    S.JOB_PRIORITY,
    S.SCHEDULE_BATCH_ID,
    S.SCHEDULE_EXPRESSION
);
--
-- pop_sessions_and_pageviews_summary_data
--
MERGE INTO SINGLE_SNOW_QUERY_JOBS D
USING (
SELECT $1 JOB_LABEL
    ,$2 JOB_QUERY
    ,$3 JOB_TYPE
    ,$4 JOB_NOTE
    ,$5 JOB_ENABLED
    ,$6 JOB_PRIORITY
    ,$7 SCHEDULE_BATCH_ID
    ,PARSE_JSON($8) SCHEDULE_EXPRESSION
FROM VALUES (
  'pop_sessions_and_pageviews_summary_data', 
  $$
  MERGE INTO TABLEAU.SESSIONS_PAGEVIEWS_SUMMARY T 
  USING ( 
    SELECT PST_DATE
        ,COALESCE(PL.ID, -1) PRODUCT_LINE_ID
        ,CHANNEL_GROUPING
        ,COALESCE(DEVICE:deviceCategory::TEXT, 'unknown') DEVICE_TYPE
        ,COUNT(DISTINCT SESSION_ID) DISTINCT_SESSIONS
        ,COUNT(*) TOTAL_SESSIONS
        ,SUM(PAGE_VIEWS) PAGEVIEWS
    FROM DATAMART.EVENTS.GA_SESSIONS S
    JOIN (
        SELECT DATASET_ID
            ,ENTITY_NAME
            ,BUSINESS_UNIT_DETAIL_NAME PRODUCT_LINE_NAME
        FROM ANALYSTS.MAPPING.BIGQUERY_DATASET_METADATA
        WHERE BUSINESS_UNIT_DETAIL_NAME LIKE ANY ('HSW/Organic','MapQuest','Social Publishing')
            AND ENTITY_NAME LIKE ANY (
              -- HSW/Organic
              'HowStuffWorks',
              
              -- MapQuest
              'MapQuest',
              --'MapQuest Extension',
              
              -- Social Publishing
              'iHeartVIP',
              'AutoVersed Quizzes',
              'Goliath Quizzes',
              'HSW Quizzes',
              'SportsBreak Quizzes',
              'Zoo Quizzes'
            )
        GROUP BY 1,2,3
    ) DS 
    ON S.DATASET_ID = DS.DATASET_ID
    LEFT JOIN BI.COMMON.PRODUCT_LINES PL
    ON DS.PRODUCT_LINE_NAME = PL.PRODUCT_LINE_NAME
    WHERE S.PST_DATE >= CURRENT_DATE()-3
    GROUP BY 1,2,3,4
    ) S 
  ON T.PST_DATE = S.PST_DATE
  AND T.PRODUCT_LINE_ID = S.PRODUCT_LINE_ID
  AND T.CHANNEL_GROUPING = S.CHANNEL_GROUPING
  AND T.DEVICE_TYPE = S.DEVICE_TYPE
  WHEN MATCHED THEN UPDATE SET 
      DISTINCT_SESSIONS = S.DISTINCT_SESSIONS,
      TOTAL_SESSIONS = S.TOTAL_SESSIONS,
      PAGEVIEWS = S.PAGEVIEWS 
  WHEN NOT MATCHED THEN INSERT(
    PST_DATE,
    PRODUCT_LINE_ID,
    CHANNEL_GROUPING,
    DEVICE_TYPE,
    DISTINCT_SESSIONS,
    TOTAL_SESSIONS,
    PAGEVIEWS
  ) 
  VALUES (
    S.PST_DATE,
    S.PRODUCT_LINE_ID,
    S.CHANNEL_GROUPING,
    S.DEVICE_TYPE,
    S.DISTINCT_SESSIONS,
    S.TOTAL_SESSIONS,
    S.PAGEVIEWS
  )
  $$,
  'Data Poulation', 'BI-1144: Populate sessions and pageviews summary', 1, NULL, 0, '[10,12,14,16,18]'
  )
) S
ON D.JOB_LABEL = S.JOB_LABEL
WHEN MATCHED THEN UPDATE SET
    JOB_LABEL = S.JOB_LABEL,
    JOB_QUERY = S.JOB_QUERY,
    JOB_TYPE = S.JOB_TYPE,
    JOB_NOTE = S.JOB_NOTE,
    JOB_ENABLED = S.JOB_ENABLED,
    JOB_PRIORITY = S.JOB_PRIORITY,
    SCHEDULE_BATCH_ID = S.SCHEDULE_BATCH_ID,
    SCHEDULE_EXPRESSION = S.SCHEDULE_EXPRESSION
WHEN NOT MATCHED THEN INSERT (
    JOB_LABEL,
    JOB_QUERY,
    JOB_TYPE,
    JOB_NOTE,
    JOB_ENABLED,
    JOB_PRIORITY,
    SCHEDULE_BATCH_ID,
    SCHEDULE_EXPRESSION
)
VALUES (
    S.JOB_LABEL,
    S.JOB_QUERY,
    S.JOB_TYPE,
    S.JOB_NOTE,
    S.JOB_ENABLED,
    S.JOB_PRIORITY,
    S.SCHEDULE_BATCH_ID,
    S.SCHEDULE_EXPRESSION
);
--
-- get_publishing_quora_google_sheet_spend
--
MERGE INTO SINGLE_SNOW_QUERY_JOBS D
USING (
SELECT $1 JOB_LABEL
    ,$2 JOB_QUERY
    ,$3 JOB_TYPE
    ,$4 JOB_NOTE
    ,$5 JOB_ENABLED
    ,$6 JOB_PRIORITY
    ,$7 SCHEDULE_BATCH_ID
    ,PARSE_JSON($8) SCHEDULE_EXPRESSION
FROM VALUES (
  'get_publishing_quora_google_sheet_spend',
  $$
  MERGE INTO MANUAL_ENTRY.BUYSIDE_ACCOUNT_DATA_MANUAL_ENTRY D
  USING (
      SELECT DATA:"date"::DATE DATA_TS
          ,'quora manual entry' ACCOUNT_ID
          ,'Active' ACCOUNT_STATUS
          ,'quora' NETWORK_NAME
          ,B.ID NETWORK_NAME_ID
          ,'USD' CURRENCY_CODE
          ,1 CONVERSION_RATE
          ,NULL::NUMBER CLICKS
          ,NULL::NUMBER IMPRESSIONS
          ,REPLACE(REPLACE(DATA:"quora_spend_usd",'$'),',')::FLOAT NATIVE_SPEND
          ,REPLACE(REPLACE(DATA:"quora_spend_usd",'$'),',')::FLOAT SPEND
      FROM BI.MANUAL_ENTRY.BUYSIDE_PUBLISHING_MANUAL_SPEND_DAILY A
      LEFT JOIN BI.COMMON.NETWORK_NAMES B
      ON B.NETWORK_NAME = 'Quora'
      ) S
  ON D.DATA_TS = S.DATA_TS
  AND D.NETWORK_NAME_ID = S.NETWORK_NAME_ID
  AND D.ACCOUNT_ID = S.ACCOUNT_ID
  WHEN MATCHED THEN UPDATE 
      SET ACCOUNT_STATUS = S.ACCOUNT_STATUS
        ,NETWORK_NAME = S.NETWORK_NAME
        ,CURRENCY_CODE = S.CURRENCY_CODE
        ,CONVERSION_RATE = S.CONVERSION_RATE
        ,CLICKS = S.CLICKS
        ,IMPRESSIONS = S.IMPRESSIONS
        ,NATIVE_SPEND = S.NATIVE_SPEND
        ,SPEND = S.SPEND
  WHEN NOT MATCHED THEN INSERT (
      DATA_TS
      ,ACCOUNT_ID
      ,ACCOUNT_STATUS
      ,NETWORK_NAME
      ,NETWORK_NAME_ID
      ,CURRENCY_CODE
      ,CONVERSION_RATE
      ,CLICKS
      ,IMPRESSIONS
      ,NATIVE_SPEND
      ,SPEND
      )
  VALUES (
      S.DATA_TS
      ,S.ACCOUNT_ID
      ,S.ACCOUNT_STATUS
      ,S.NETWORK_NAME
      ,S.NETWORK_NAME_ID
      ,S.CURRENCY_CODE
      ,S.CONVERSION_RATE
      ,S.CLICKS
      ,S.IMPRESSIONS
      ,S.NATIVE_SPEND
      ,S.SPEND
  )
  $$,
  'Manual Entry', 'BI-1151: Publishing quora manual entry spend', 1, 120, 1, '[24]'
  )
) S
ON D.JOB_LABEL = S.JOB_LABEL
WHEN MATCHED THEN UPDATE SET
    JOB_LABEL = S.JOB_LABEL,
    JOB_QUERY = S.JOB_QUERY,
    JOB_TYPE = S.JOB_TYPE,
    JOB_NOTE = S.JOB_NOTE,
    JOB_ENABLED = S.JOB_ENABLED,
    JOB_PRIORITY = S.JOB_PRIORITY,
    SCHEDULE_BATCH_ID = S.SCHEDULE_BATCH_ID,
    SCHEDULE_EXPRESSION = S.SCHEDULE_EXPRESSION
WHEN NOT MATCHED THEN INSERT (
    JOB_LABEL,
    JOB_QUERY,
    JOB_TYPE,
    JOB_NOTE,
    JOB_ENABLED,
    JOB_PRIORITY,
    SCHEDULE_BATCH_ID,
    SCHEDULE_EXPRESSION
)
VALUES (
    S.JOB_LABEL,
    S.JOB_QUERY,
    S.JOB_TYPE,
    S.JOB_NOTE,
    S.JOB_ENABLED,
    S.JOB_PRIORITY,
    S.SCHEDULE_BATCH_ID,
    S.SCHEDULE_EXPRESSION
);
--
-- buyside_account_data_tracking
--
MERGE INTO SINGLE_SNOW_QUERY_JOBS D
USING (
SELECT $1 JOB_LABEL
    ,$2 JOB_QUERY
    ,$3 JOB_TYPE
    ,$4 JOB_NOTE
    ,$5 JOB_ENABLED
    ,$6 JOB_PRIORITY
    ,$7 SCHEDULE_BATCH_ID
    ,PARSE_JSON($8) SCHEDULE_EXPRESSION
FROM VALUES (
  'buyside_account_data_tracking',
  $$
  CALL ALERTS.BUYSIDE_ACCOUNT_DATA_TRACKING_SCHEDULER ();
  $$,
  'Data Poulation', 'BI-1194: Populating buyside account data tracking', 1, 210, 2, '[24]'
  )
) S
ON D.JOB_LABEL = S.JOB_LABEL
WHEN MATCHED THEN UPDATE SET
    JOB_LABEL = S.JOB_LABEL,
    JOB_QUERY = S.JOB_QUERY,
    JOB_TYPE = S.JOB_TYPE,
    JOB_NOTE = S.JOB_NOTE,
    JOB_ENABLED = S.JOB_ENABLED,
    JOB_PRIORITY = S.JOB_PRIORITY,
    SCHEDULE_BATCH_ID = S.SCHEDULE_BATCH_ID,
    SCHEDULE_EXPRESSION = S.SCHEDULE_EXPRESSION
WHEN NOT MATCHED THEN INSERT (
    JOB_LABEL,
    JOB_QUERY,
    JOB_TYPE,
    JOB_NOTE,
    JOB_ENABLED,
    JOB_PRIORITY,
    SCHEDULE_BATCH_ID,
    SCHEDULE_EXPRESSION
)
VALUES (
    S.JOB_LABEL,
    S.JOB_QUERY,
    S.JOB_TYPE,
    S.JOB_NOTE,
    S.JOB_ENABLED,
    S.JOB_PRIORITY,
    S.SCHEDULE_BATCH_ID,
    S.SCHEDULE_EXPRESSION
);
--
-- get_waterfox_playanext_google_sheet_spend
--
MERGE INTO SINGLE_SNOW_QUERY_JOBS D
USING (
SELECT $1 JOB_LABEL
    ,$2 JOB_QUERY
    ,$3 JOB_TYPE
    ,$4 JOB_NOTE
    ,$5 JOB_ENABLED
    ,$6 JOB_PRIORITY
    ,$7 SCHEDULE_BATCH_ID
    ,PARSE_JSON($8) SCHEDULE_EXPRESSION
FROM VALUES (
  'get_waterfox_playanext_google_sheet_spend',
  $$
  MERGE INTO MANUAL_ENTRY.BUYSIDE_ACCOUNT_DATA_MANUAL_ENTRY D
  USING (
      SELECT PN.DATA:"date"::DATE DATA_TS
          ,'playanext manual waterfox spend' ACCOUNT_ID
          ,'Active' ACCOUNT_STATUS
          ,'PlayaNext' NETWORK_NAME
          ,AMM.NETWORK_NAME_ID
          ,'USD' CURRENCY_CODE
          ,1 CONVERSION_RATE
          ,NULL::NUMBER CLICKS
          ,NULL::NUMBER IMPRESSIONS
          ,REPLACE(TRIM(DATA:playanext_spend::TEXT,'$'),',') NATIVE_SPEND
          ,REPLACE(TRIM(DATA:playanext_spend::TEXT,'$'),',') SPEND
      FROM BI.MANUAL_ENTRY.WATERFOX_SPEND_MANUAL_ENTRY PN
      JOIN BI.COMMON.ACCOUNT_METADATA_MAPPINGS AMM 
      ON AMM.ACCOUNT_ID = 'playanext manual waterfox spend'
      ) S
  ON D.DATA_TS = S.DATA_TS
  AND D.NETWORK_NAME_ID = S.NETWORK_NAME_ID
  AND D.ACCOUNT_ID = S.ACCOUNT_ID
  WHEN MATCHED THEN UPDATE 
      SET ACCOUNT_STATUS = S.ACCOUNT_STATUS
        ,NETWORK_NAME = S.NETWORK_NAME
        ,CURRENCY_CODE = S.CURRENCY_CODE
        ,CONVERSION_RATE = S.CONVERSION_RATE
        ,CLICKS = S.CLICKS
        ,IMPRESSIONS = S.IMPRESSIONS
        ,NATIVE_SPEND = S.NATIVE_SPEND
        ,SPEND = S.SPEND
  WHEN NOT MATCHED THEN INSERT (
      DATA_TS
      ,ACCOUNT_ID
      ,ACCOUNT_STATUS
      ,NETWORK_NAME
      ,NETWORK_NAME_ID
      ,CURRENCY_CODE
      ,CONVERSION_RATE
      ,CLICKS
      ,IMPRESSIONS
      ,NATIVE_SPEND
      ,SPEND
      )
  VALUES (
      S.DATA_TS
      ,S.ACCOUNT_ID
      ,S.ACCOUNT_STATUS
      ,S.NETWORK_NAME
      ,S.NETWORK_NAME_ID
      ,S.CURRENCY_CODE
      ,S.CONVERSION_RATE
      ,S.CLICKS
      ,S.IMPRESSIONS
      ,S.NATIVE_SPEND
      ,S.SPEND
  )
  $$,
  'Manual Entry', 'BI-1026: Waterfox Playanext manual spend', 1, 130, 1, '[24]'
  )
) S
ON D.JOB_LABEL = S.JOB_LABEL
WHEN MATCHED THEN UPDATE SET
    JOB_LABEL = S.JOB_LABEL,
    JOB_QUERY = S.JOB_QUERY,
    JOB_TYPE = S.JOB_TYPE,
    JOB_NOTE = S.JOB_NOTE,
    JOB_ENABLED = S.JOB_ENABLED,
    JOB_PRIORITY = S.JOB_PRIORITY,
    SCHEDULE_BATCH_ID = S.SCHEDULE_BATCH_ID,
    SCHEDULE_EXPRESSION = S.SCHEDULE_EXPRESSION
WHEN NOT MATCHED THEN INSERT (
    JOB_LABEL,
    JOB_QUERY,
    JOB_TYPE,
    JOB_NOTE,
    JOB_ENABLED,
    JOB_PRIORITY,
    SCHEDULE_BATCH_ID,
    SCHEDULE_EXPRESSION
)
VALUES (
    S.JOB_LABEL,
    S.JOB_QUERY,
    S.JOB_TYPE,
    S.JOB_NOTE,
    S.JOB_ENABLED,
    S.JOB_PRIORITY,
    S.SCHEDULE_BATCH_ID,
    S.SCHEDULE_EXPRESSION
);
--
-- get_ginsu_cnn_google_sheet_spend
--
MERGE INTO SINGLE_SNOW_QUERY_JOBS D
USING (
SELECT $1 JOB_LABEL
    ,$2 JOB_QUERY
    ,$3 JOB_TYPE
    ,$4 JOB_NOTE
    ,$5 JOB_ENABLED
    ,$6 JOB_PRIORITY
    ,$7 SCHEDULE_BATCH_ID
    ,PARSE_JSON($8) SCHEDULE_EXPRESSION
FROM VALUES (
  'get_ginsu_cnn_google_sheet_spend',
  $$
  MERGE INTO MANUAL_ENTRY.BUYSIDE_ACCOUNT_DATA_MANUAL_ENTRY D
  USING (
      SELECT CNN.DATA:"date"::DATE DATA_TS
          ,'cnn ginsu manual spend' ACCOUNT_ID
          ,'Active' ACCOUNT_STATUS
          ,'CNN' NETWORK_NAME
          ,AMM.NETWORK_NAME_ID
          ,'USD' CURRENCY_CODE
          ,1 CONVERSION_RATE
          ,NULL::NUMBER CLICKS
          ,NULL::NUMBER IMPRESSIONS
          ,REPLACE(TRIM(DATA:cnn_spend_usd::TEXT,'$'),',') NATIVE_SPEND
          ,REPLACE(TRIM(DATA:cnn_spend_usd::TEXT,'$'),',') SPEND
      FROM BI.MANUAL_ENTRY.GINSU_SPEND_MANUAL_ENTRY CNN
      JOIN BI.COMMON.ACCOUNT_METADATA_MAPPINGS AMM 
      ON AMM.ACCOUNT_ID = 'cnn ginsu manual spend'
      ) S
  ON D.DATA_TS = S.DATA_TS
  AND D.NETWORK_NAME_ID = S.NETWORK_NAME_ID
  AND D.ACCOUNT_ID = S.ACCOUNT_ID
  WHEN MATCHED THEN UPDATE 
      SET ACCOUNT_STATUS = S.ACCOUNT_STATUS
        ,NETWORK_NAME = S.NETWORK_NAME
        ,CURRENCY_CODE = S.CURRENCY_CODE
        ,CONVERSION_RATE = S.CONVERSION_RATE
        ,CLICKS = S.CLICKS
        ,IMPRESSIONS = S.IMPRESSIONS
        ,NATIVE_SPEND = S.NATIVE_SPEND
        ,SPEND = S.SPEND
  WHEN NOT MATCHED THEN INSERT (
      DATA_TS
      ,ACCOUNT_ID
      ,ACCOUNT_STATUS
      ,NETWORK_NAME
      ,NETWORK_NAME_ID
      ,CURRENCY_CODE
      ,CONVERSION_RATE
      ,CLICKS
      ,IMPRESSIONS
      ,NATIVE_SPEND
      ,SPEND
      )
  VALUES (
      S.DATA_TS
      ,S.ACCOUNT_ID
      ,S.ACCOUNT_STATUS
      ,S.NETWORK_NAME
      ,S.NETWORK_NAME_ID
      ,S.CURRENCY_CODE
      ,S.CONVERSION_RATE
      ,S.CLICKS
      ,S.IMPRESSIONS
      ,S.NATIVE_SPEND
      ,S.SPEND
  )
  $$,
  'Manual Entry', 'BI-1046: Ginbsu cnn manual entry spend', 1, 140, 1, '[24]'
  )
) S
ON D.JOB_LABEL = S.JOB_LABEL
WHEN MATCHED THEN UPDATE SET
    JOB_LABEL = S.JOB_LABEL,
    JOB_QUERY = S.JOB_QUERY,
    JOB_TYPE = S.JOB_TYPE,
    JOB_NOTE = S.JOB_NOTE,
    JOB_ENABLED = S.JOB_ENABLED,
    JOB_PRIORITY = S.JOB_PRIORITY,
    SCHEDULE_BATCH_ID = S.SCHEDULE_BATCH_ID,
    SCHEDULE_EXPRESSION = S.SCHEDULE_EXPRESSION
WHEN NOT MATCHED THEN INSERT (
    JOB_LABEL,
    JOB_QUERY,
    JOB_TYPE,
    JOB_NOTE,
    JOB_ENABLED,
    JOB_PRIORITY,
    SCHEDULE_BATCH_ID,
    SCHEDULE_EXPRESSION
)
VALUES (
    S.JOB_LABEL,
    S.JOB_QUERY,
    S.JOB_TYPE,
    S.JOB_NOTE,
    S.JOB_ENABLED,
    S.JOB_PRIORITY,
    S.SCHEDULE_BATCH_ID,
    S.SCHEDULE_EXPRESSION
);
-------------------------------------------------------------
-- Test or maually run the jobs 
-------------------------------------------------------------
--
-- Check the existing jobs
--
SELECT * 
FROM SINGLE_SNOW_QUERY_JOBS
//WHERE JOB_ENABLED = 1
//AND (ARRAY_CONTAINS(DATE_PART('HH',CURRENT_TIMESTAMP), SCHEDULE_EXPRESSION) 
//  OR ARRAY_CONTAINS(24, SCHEDULE_EXPRESSION)
//  OR JOB_ENABLED = 0)
ORDER BY JOB_PRIORITY
;
--
-- Call SP to test the un-enabled job
--
CALL SINGLE_SNOW_QUERY_JOB_SCHEDULER(false);
--
--
-- Call SP to run all enabled jobs
--
CALL SINGLE_SNOW_QUERY_JOB_SCHEDULER(true, 1);
